
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c7c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ee  00800060  00002c7c  00002cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002340  00000000  00000000  00002ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000014ec  00000000  00000000  00005220  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  0000670c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  0000688c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00006a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00008a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  00009bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000abd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  0000ad74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  0000b032  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 34       	cpi	r26, 0x4E	; 78
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 51 12 	call	0x24a2	; 0x24a2 <main>
      7a:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e3       	ldi	r26, 0x30	; 48
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e3       	ldi	r24, 0x30	; 48
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e8 5c       	subi	r30, 0xC8	; 200
     92c:	fe 4f       	sbci	r31, 0xFE	; 254
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <Check_Password>:
u32* balance_ptr = &balance;



state Check_Password(u32 password)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <Check_Password+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <Check_Password+0x8>
     c98:	0f 92       	push	r0
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	69 83       	std	Y+1, r22	; 0x01
     ca0:	7a 83       	std	Y+2, r23	; 0x02
     ca2:	8b 83       	std	Y+3, r24	; 0x03
     ca4:	9c 83       	std	Y+4, r25	; 0x04
	if(password == Saved_password)
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	ab 81       	ldd	r26, Y+3	; 0x03
     cac:	bc 81       	ldd	r27, Y+4	; 0x04
     cae:	8b 37       	cpi	r24, 0x7B	; 123
     cb0:	91 05       	cpc	r25, r1
     cb2:	a1 05       	cpc	r26, r1
     cb4:	b1 05       	cpc	r27, r1
     cb6:	19 f4       	brne	.+6      	; 0xcbe <Check_Password+0x2e>
	{
		return Correct_password; //correct password
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	8d 83       	std	Y+5, r24	; 0x05
     cbc:	0a c0       	rjmp	.+20     	; 0xcd2 <Check_Password+0x42>
	}
	else
	{
		LCD_CLEAR_ALL_SCREEN();
     cbe:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
		SEND_A_STRING("Wrong password");
     cc2:	80 e6       	ldi	r24, 0x60	; 96
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
		LCD_CLEAR_ALL_SCREEN();
     cca:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
		return wrong_password;
     cce:	8e ef       	ldi	r24, 0xFE	; 254
     cd0:	8d 83       	std	Y+5, r24	; 0x05
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <Show_Balance>:

void Show_Balance(void)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
	SEND_A_STRING("Your Balance");
     cec:	8f e6       	ldi	r24, 0x6F	; 111
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
	LCD_GOTO_XY(1, 0);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
	LCD_DISPLAY_NUM(balance);
     cfc:	80 91 38 02 	lds	r24, 0x0238
     d00:	90 91 39 02 	lds	r25, 0x0239
     d04:	a0 91 3a 02 	lds	r26, 0x023A
     d08:	b0 91 3b 02 	lds	r27, 0x023B
     d0c:	0e 94 9e 09 	call	0x133c	; 0x133c <LCD_DISPLAY_NUM>

}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <Inset_Money>:

void Inset_Money(u32 money)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <Inset_Money+0x6>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <Inset_Money+0x8>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	69 83       	std	Y+1, r22	; 0x01
     d24:	7a 83       	std	Y+2, r23	; 0x02
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	9c 83       	std	Y+4, r25	; 0x04
	*balance_ptr = *balance_ptr + money;
     d2a:	60 91 3c 02 	lds	r22, 0x023C
     d2e:	70 91 3d 02 	lds	r23, 0x023D
     d32:	e0 91 3c 02 	lds	r30, 0x023C
     d36:	f0 91 3d 02 	lds	r31, 0x023D
     d3a:	20 81       	ld	r18, Z
     d3c:	31 81       	ldd	r19, Z+1	; 0x01
     d3e:	42 81       	ldd	r20, Z+2	; 0x02
     d40:	53 81       	ldd	r21, Z+3	; 0x03
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	ab 81       	ldd	r26, Y+3	; 0x03
     d48:	bc 81       	ldd	r27, Y+4	; 0x04
     d4a:	82 0f       	add	r24, r18
     d4c:	93 1f       	adc	r25, r19
     d4e:	a4 1f       	adc	r26, r20
     d50:	b5 1f       	adc	r27, r21
     d52:	fb 01       	movw	r30, r22
     d54:	80 83       	st	Z, r24
     d56:	91 83       	std	Z+1, r25	; 0x01
     d58:	a2 83       	std	Z+2, r26	; 0x02
     d5a:	b3 83       	std	Z+3, r27	; 0x03
	LCD_GOTO_XY(0, 0);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
	SEND_A_STRING("new balance: ");
     d64:	8c e7       	ldi	r24, 0x7C	; 124
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
	LCD_GOTO_XY(1, 0);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
	LCD_DISPLAY_NUM(*balance_ptr);
     d74:	e0 91 3c 02 	lds	r30, 0x023C
     d78:	f0 91 3d 02 	lds	r31, 0x023D
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	a2 81       	ldd	r26, Z+2	; 0x02
     d82:	b3 81       	ldd	r27, Z+3	; 0x03
     d84:	0e 94 9e 09 	call	0x133c	; 0x133c <LCD_DISPLAY_NUM>
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <Withdraw>:

void Withdraw(u32 money)
{
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	00 d0       	rcall	.+0      	; 0xda4 <Withdraw+0xe>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <Withdraw+0x10>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	69 83       	std	Y+1, r22	; 0x01
     dac:	7a 83       	std	Y+2, r23	; 0x02
     dae:	8b 83       	std	Y+3, r24	; 0x03
     db0:	9c 83       	std	Y+4, r25	; 0x04
	if(money > *balance_ptr)
     db2:	e0 91 3c 02 	lds	r30, 0x023C
     db6:	f0 91 3d 02 	lds	r31, 0x023D
     dba:	20 81       	ld	r18, Z
     dbc:	31 81       	ldd	r19, Z+1	; 0x01
     dbe:	42 81       	ldd	r20, Z+2	; 0x02
     dc0:	53 81       	ldd	r21, Z+3	; 0x03
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	9a 81       	ldd	r25, Y+2	; 0x02
     dc6:	ab 81       	ldd	r26, Y+3	; 0x03
     dc8:	bc 81       	ldd	r27, Y+4	; 0x04
     dca:	28 17       	cp	r18, r24
     dcc:	39 07       	cpc	r19, r25
     dce:	4a 07       	cpc	r20, r26
     dd0:	5b 07       	cpc	r21, r27
     dd2:	28 f4       	brcc	.+10     	; 0xdde <Withdraw+0x48>
	{
		SEND_A_STRING("not enough balance");
     dd4:	8a e8       	ldi	r24, 0x8A	; 138
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
     ddc:	33 c0       	rjmp	.+102    	; 0xe44 <Withdraw+0xae>
	}
	else
	{
		*balance_ptr = *balance_ptr - money;
     dde:	60 91 3c 02 	lds	r22, 0x023C
     de2:	70 91 3d 02 	lds	r23, 0x023D
     de6:	e0 91 3c 02 	lds	r30, 0x023C
     dea:	f0 91 3d 02 	lds	r31, 0x023D
     dee:	20 81       	ld	r18, Z
     df0:	31 81       	ldd	r19, Z+1	; 0x01
     df2:	42 81       	ldd	r20, Z+2	; 0x02
     df4:	53 81       	ldd	r21, Z+3	; 0x03
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	9a 81       	ldd	r25, Y+2	; 0x02
     dfa:	ab 81       	ldd	r26, Y+3	; 0x03
     dfc:	bc 81       	ldd	r27, Y+4	; 0x04
     dfe:	79 01       	movw	r14, r18
     e00:	8a 01       	movw	r16, r20
     e02:	e8 1a       	sub	r14, r24
     e04:	f9 0a       	sbc	r15, r25
     e06:	0a 0b       	sbc	r16, r26
     e08:	1b 0b       	sbc	r17, r27
     e0a:	d8 01       	movw	r26, r16
     e0c:	c7 01       	movw	r24, r14
     e0e:	fb 01       	movw	r30, r22
     e10:	80 83       	st	Z, r24
     e12:	91 83       	std	Z+1, r25	; 0x01
     e14:	a2 83       	std	Z+2, r26	; 0x02
     e16:	b3 83       	std	Z+3, r27	; 0x03
		LCD_GOTO_XY(0, 0);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
		SEND_A_STRING("new balance: ");
     e20:	8c e7       	ldi	r24, 0x7C	; 124
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
		LCD_GOTO_XY(1, 0);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
		LCD_DISPLAY_NUM(*balance_ptr);
     e30:	e0 91 3c 02 	lds	r30, 0x023C
     e34:	f0 91 3d 02 	lds	r31, 0x023D
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	a2 81       	ldd	r26, Z+2	; 0x02
     e3e:	b3 81       	ldd	r27, Z+3	; 0x03
     e40:	0e 94 9e 09 	call	0x133c	; 0x133c <LCD_DISPLAY_NUM>
	}
}
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	08 95       	ret

00000e5a <LCD_KICK>:
 *  Created on: Aug 20, 2023
 *      Author: user
 */
#include "LCD.h"

void LCD_KICK(void){
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	2e 97       	sbiw	r28, 0x0e	; 14
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
	LCD_CONTROL &= ~(1<<EN_SWITCH);
     e6e:	a8 e3       	ldi	r26, 0x38	; 56
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e8 e3       	ldi	r30, 0x38	; 56
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	87 7f       	andi	r24, 0xF7	; 247
     e7a:	8c 93       	st	X, r24
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a8 e4       	ldi	r26, 0x48	; 72
     e82:	b2 e4       	ldi	r27, 0x42	; 66
     e84:	8b 87       	std	Y+11, r24	; 0x0b
     e86:	9c 87       	std	Y+12, r25	; 0x0c
     e88:	ad 87       	std	Y+13, r26	; 0x0d
     e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e90:	8d 85       	ldd	r24, Y+13	; 0x0d
     e92:	9e 85       	ldd	r25, Y+14	; 0x0e
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	4a ef       	ldi	r20, 0xFA	; 250
     e9a:	54 e4       	ldi	r21, 0x44	; 68
     e9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	8f 83       	std	Y+7, r24	; 0x07
     ea6:	98 87       	std	Y+8, r25	; 0x08
     ea8:	a9 87       	std	Y+9, r26	; 0x09
     eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eac:	6f 81       	ldd	r22, Y+7	; 0x07
     eae:	78 85       	ldd	r23, Y+8	; 0x08
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e8       	ldi	r20, 0x80	; 128
     eba:	5f e3       	ldi	r21, 0x3F	; 63
     ebc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ec0:	88 23       	and	r24, r24
     ec2:	2c f4       	brge	.+10     	; 0xece <LCD_KICK+0x74>
		__ticks = 1;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05
     ecc:	3f c0       	rjmp	.+126    	; 0xf4c <LCD_KICK+0xf2>
	else if (__tmp > 65535)
     ece:	6f 81       	ldd	r22, Y+7	; 0x07
     ed0:	78 85       	ldd	r23, Y+8	; 0x08
     ed2:	89 85       	ldd	r24, Y+9	; 0x09
     ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	3f ef       	ldi	r19, 0xFF	; 255
     eda:	4f e7       	ldi	r20, 0x7F	; 127
     edc:	57 e4       	ldi	r21, 0x47	; 71
     ede:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ee2:	18 16       	cp	r1, r24
     ee4:	4c f5       	brge	.+82     	; 0xf38 <LCD_KICK+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eea:	8d 85       	ldd	r24, Y+13	; 0x0d
     eec:	9e 85       	ldd	r25, Y+14	; 0x0e
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e2       	ldi	r20, 0x20	; 32
     ef4:	51 e4       	ldi	r21, 0x41	; 65
     ef6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	9e 83       	std	Y+6, r25	; 0x06
     f0c:	8d 83       	std	Y+5, r24	; 0x05
     f0e:	0f c0       	rjmp	.+30     	; 0xf2e <LCD_KICK+0xd4>
     f10:	88 ec       	ldi	r24, 0xC8	; 200
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	9c 83       	std	Y+4, r25	; 0x04
     f16:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <LCD_KICK+0xc2>
     f20:	9c 83       	std	Y+4, r25	; 0x04
     f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	9e 83       	std	Y+6, r25	; 0x06
     f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	9e 81       	ldd	r25, Y+6	; 0x06
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	69 f7       	brne	.-38     	; 0xf10 <LCD_KICK+0xb6>
     f36:	14 c0       	rjmp	.+40     	; 0xf60 <LCD_KICK+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f38:	6f 81       	ldd	r22, Y+7	; 0x07
     f3a:	78 85       	ldd	r23, Y+8	; 0x08
     f3c:	89 85       	ldd	r24, Y+9	; 0x09
     f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	9e 83       	std	Y+6, r25	; 0x06
     f4a:	8d 83       	std	Y+5, r24	; 0x05
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	9e 81       	ldd	r25, Y+6	; 0x06
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <LCD_KICK+0xfe>
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_CONTROL |= (1<<EN_SWITCH);
     f60:	a8 e3       	ldi	r26, 0x38	; 56
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e8 e3       	ldi	r30, 0x38	; 56
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 60       	ori	r24, 0x08	; 8
     f6c:	8c 93       	st	X, r24

}
     f6e:	2e 96       	adiw	r28, 0x0e	; 14
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <LCD_IS_BUSY_CHECK>:

void LCD_IS_BUSY_CHECK(void){
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	DATA_DIR_LCD_PORT = 0x00;
     f88:	ea e3       	ldi	r30, 0x3A	; 58
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	10 82       	st	Z, r1
	LCD_CONTROL |= (1<< RW);
     f8e:	a8 e3       	ldi	r26, 0x38	; 56
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e8 e3       	ldi	r30, 0x38	; 56
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	84 60       	ori	r24, 0x04	; 4
     f9a:	8c 93       	st	X, r24
	LCD_CONTROL &= ~(1<< RS_SWITCH);
     f9c:	a8 e3       	ldi	r26, 0x38	; 56
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e8 e3       	ldi	r30, 0x38	; 56
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8d 7f       	andi	r24, 0xFD	; 253
     fa8:	8c 93       	st	X, r24

	LCD_KICK();
     faa:	0e 94 2d 07 	call	0xe5a	; 0xe5a <LCD_KICK>

	DATA_DIR_LCD_PORT = 0xFF;
     fae:	ea e3       	ldi	r30, 0x3A	; 58
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	80 83       	st	Z, r24
	LCD_CONTROL &= ~(1<<RW);
     fb6:	a8 e3       	ldi	r26, 0x38	; 56
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e8 e3       	ldi	r30, 0x38	; 56
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8b 7f       	andi	r24, 0xFB	; 251
     fc2:	8c 93       	st	X, r24
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <LCD_INIT>:

void LCD_INIT(void){
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	6c 97       	sbiw	r28, 0x1c	; 28
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a0 ea       	ldi	r26, 0xA0	; 160
     fe4:	b1 e4       	ldi	r27, 0x41	; 65
     fe6:	89 8f       	std	Y+25, r24	; 0x19
     fe8:	9a 8f       	std	Y+26, r25	; 0x1a
     fea:	ab 8f       	std	Y+27, r26	; 0x1b
     fec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fee:	69 8d       	ldd	r22, Y+25	; 0x19
     ff0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	4a ef       	ldi	r20, 0xFA	; 250
     ffc:	54 e4       	ldi	r21, 0x44	; 68
     ffe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	8d 8b       	std	Y+21, r24	; 0x15
    1008:	9e 8b       	std	Y+22, r25	; 0x16
    100a:	af 8b       	std	Y+23, r26	; 0x17
    100c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    100e:	6d 89       	ldd	r22, Y+21	; 0x15
    1010:	7e 89       	ldd	r23, Y+22	; 0x16
    1012:	8f 89       	ldd	r24, Y+23	; 0x17
    1014:	98 8d       	ldd	r25, Y+24	; 0x18
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e8       	ldi	r20, 0x80	; 128
    101c:	5f e3       	ldi	r21, 0x3F	; 63
    101e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1022:	88 23       	and	r24, r24
    1024:	2c f4       	brge	.+10     	; 0x1030 <LCD_INIT+0x66>
		__ticks = 1;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9c 8b       	std	Y+20, r25	; 0x14
    102c:	8b 8b       	std	Y+19, r24	; 0x13
    102e:	3f c0       	rjmp	.+126    	; 0x10ae <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    1030:	6d 89       	ldd	r22, Y+21	; 0x15
    1032:	7e 89       	ldd	r23, Y+22	; 0x16
    1034:	8f 89       	ldd	r24, Y+23	; 0x17
    1036:	98 8d       	ldd	r25, Y+24	; 0x18
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	3f ef       	ldi	r19, 0xFF	; 255
    103c:	4f e7       	ldi	r20, 0x7F	; 127
    103e:	57 e4       	ldi	r21, 0x47	; 71
    1040:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1044:	18 16       	cp	r1, r24
    1046:	4c f5       	brge	.+82     	; 0x109a <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1048:	69 8d       	ldd	r22, Y+25	; 0x19
    104a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    104c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    104e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e2       	ldi	r20, 0x20	; 32
    1056:	51 e4       	ldi	r21, 0x41	; 65
    1058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	9c 8b       	std	Y+20, r25	; 0x14
    106e:	8b 8b       	std	Y+19, r24	; 0x13
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <LCD_INIT+0xc6>
    1072:	88 ec       	ldi	r24, 0xC8	; 200
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9a 8b       	std	Y+18, r25	; 0x12
    1078:	89 8b       	std	Y+17, r24	; 0x11
    107a:	89 89       	ldd	r24, Y+17	; 0x11
    107c:	9a 89       	ldd	r25, Y+18	; 0x12
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <LCD_INIT+0xb4>
    1082:	9a 8b       	std	Y+18, r25	; 0x12
    1084:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1086:	8b 89       	ldd	r24, Y+19	; 0x13
    1088:	9c 89       	ldd	r25, Y+20	; 0x14
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	9c 8b       	std	Y+20, r25	; 0x14
    108e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1090:	8b 89       	ldd	r24, Y+19	; 0x13
    1092:	9c 89       	ldd	r25, Y+20	; 0x14
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	69 f7       	brne	.-38     	; 0x1072 <LCD_INIT+0xa8>
    1098:	14 c0       	rjmp	.+40     	; 0x10c2 <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109a:	6d 89       	ldd	r22, Y+21	; 0x15
    109c:	7e 89       	ldd	r23, Y+22	; 0x16
    109e:	8f 89       	ldd	r24, Y+23	; 0x17
    10a0:	98 8d       	ldd	r25, Y+24	; 0x18
    10a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	9c 8b       	std	Y+20, r25	; 0x14
    10ac:	8b 8b       	std	Y+19, r24	; 0x13
    10ae:	8b 89       	ldd	r24, Y+19	; 0x13
    10b0:	9c 89       	ldd	r25, Y+20	; 0x14
    10b2:	98 8b       	std	Y+16, r25	; 0x10
    10b4:	8f 87       	std	Y+15, r24	; 0x0f
    10b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b8:	98 89       	ldd	r25, Y+16	; 0x10
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <LCD_INIT+0xf0>
    10be:	98 8b       	std	Y+16, r25	; 0x10
    10c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	DATA_DIR_LCD_CONTROL |= (1<<EN_SWITCH | 1<<RW | 1<<RS_SWITCH);
    10c2:	a7 e3       	ldi	r26, 0x37	; 55
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e7 e3       	ldi	r30, 0x37	; 55
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8e 60       	ori	r24, 0x0E	; 14
    10ce:	8c 93       	st	X, r24
	LCD_CONTROL &= ~(1<<EN_SWITCH | 1<<RW | 1<<RS_SWITCH);
    10d0:	a8 e3       	ldi	r26, 0x38	; 56
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e8 e3       	ldi	r30, 0x38	; 56
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	81 7f       	andi	r24, 0xF1	; 241
    10dc:	8c 93       	st	X, r24

	DATA_DIR_LCD_PORT = 0xFF;
    10de:	ea e3       	ldi	r30, 0x3A	; 58
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	80 83       	st	Z, r24
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a0 e7       	ldi	r26, 0x70	; 112
    10ec:	b1 e4       	ldi	r27, 0x41	; 65
    10ee:	8b 87       	std	Y+11, r24	; 0x0b
    10f0:	9c 87       	std	Y+12, r25	; 0x0c
    10f2:	ad 87       	std	Y+13, r26	; 0x0d
    10f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	4a ef       	ldi	r20, 0xFA	; 250
    1104:	54 e4       	ldi	r21, 0x44	; 68
    1106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	8f 83       	std	Y+7, r24	; 0x07
    1110:	98 87       	std	Y+8, r25	; 0x08
    1112:	a9 87       	std	Y+9, r26	; 0x09
    1114:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1116:	6f 81       	ldd	r22, Y+7	; 0x07
    1118:	78 85       	ldd	r23, Y+8	; 0x08
    111a:	89 85       	ldd	r24, Y+9	; 0x09
    111c:	9a 85       	ldd	r25, Y+10	; 0x0a
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e8       	ldi	r20, 0x80	; 128
    1124:	5f e3       	ldi	r21, 0x3F	; 63
    1126:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    112a:	88 23       	and	r24, r24
    112c:	2c f4       	brge	.+10     	; 0x1138 <LCD_INIT+0x16e>
		__ticks = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 83       	std	Y+5, r24	; 0x05
    1136:	3f c0       	rjmp	.+126    	; 0x11b6 <LCD_INIT+0x1ec>
	else if (__tmp > 65535)
    1138:	6f 81       	ldd	r22, Y+7	; 0x07
    113a:	78 85       	ldd	r23, Y+8	; 0x08
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	3f ef       	ldi	r19, 0xFF	; 255
    1144:	4f e7       	ldi	r20, 0x7F	; 127
    1146:	57 e4       	ldi	r21, 0x47	; 71
    1148:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    114c:	18 16       	cp	r1, r24
    114e:	4c f5       	brge	.+82     	; 0x11a2 <LCD_INIT+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1150:	6b 85       	ldd	r22, Y+11	; 0x0b
    1152:	7c 85       	ldd	r23, Y+12	; 0x0c
    1154:	8d 85       	ldd	r24, Y+13	; 0x0d
    1156:	9e 85       	ldd	r25, Y+14	; 0x0e
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e2       	ldi	r20, 0x20	; 32
    115e:	51 e4       	ldi	r21, 0x41	; 65
    1160:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
    1178:	0f c0       	rjmp	.+30     	; 0x1198 <LCD_INIT+0x1ce>
    117a:	88 ec       	ldi	r24, 0xC8	; 200
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <LCD_INIT+0x1bc>
    118a:	9c 83       	std	Y+4, r25	; 0x04
    118c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	69 f7       	brne	.-38     	; 0x117a <LCD_INIT+0x1b0>
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <LCD_INIT+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a2:	6f 81       	ldd	r22, Y+7	; 0x07
    11a4:	78 85       	ldd	r23, Y+8	; 0x08
    11a6:	89 85       	ldd	r24, Y+9	; 0x09
    11a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9e 83       	std	Y+6, r25	; 0x06
    11b4:	8d 83       	std	Y+5, r24	; 0x05
    11b6:	8d 81       	ldd	r24, Y+5	; 0x05
    11b8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <LCD_INIT+0x1f8>
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

	LCD_CLEAR_ALL_SCREEN();
    11ca:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>

#ifdef EIGHT_BIT_MODE
	LCD_SEND_A_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    11ce:	88 e3       	ldi	r24, 0x38	; 56
    11d0:	0e 94 27 09 	call	0x124e	; 0x124e <LCD_SEND_A_COMMAND>
#ifdef FOUR_BIT_MODE
	LCD_SEND_A_COMMAND(0x02);
	LCD_SEND_A_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_SEND_A_COMMAND(LCD_ENTRY_MODE);
    11d4:	86 e0       	ldi	r24, 0x06	; 6
    11d6:	0e 94 27 09 	call	0x124e	; 0x124e <LCD_SEND_A_COMMAND>
	LCD_SEND_A_COMMAND(LCD_BEGIN_AT_FIRST_RAW);
    11da:	80 e8       	ldi	r24, 0x80	; 128
    11dc:	0e 94 27 09 	call	0x124e	; 0x124e <LCD_SEND_A_COMMAND>
	LCD_SEND_A_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
    11e0:	8f e0       	ldi	r24, 0x0F	; 15
    11e2:	0e 94 27 09 	call	0x124e	; 0x124e <LCD_SEND_A_COMMAND>


}
    11e6:	6c 96       	adiw	r28, 0x1c	; 28
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <LCD_CLEAR_ALL_SCREEN>:

void LCD_CLEAR_ALL_SCREEN(void){
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
	LCD_SEND_A_COMMAND(LCD_CLEAR_SCREEN);
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	0e 94 27 09 	call	0x124e	; 0x124e <LCD_SEND_A_COMMAND>
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <LCD_GOTO_XY+0x6>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	6a 83       	std	Y+2, r22	; 0x02
	if(line == 0)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	88 23       	and	r24, r24
    121e:	41 f4       	brne	.+16     	; 0x1230 <LCD_GOTO_XY+0x24>
	{
		if(position < 16 && position >= 0)
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 31       	cpi	r24, 0x10	; 16
    1224:	78 f4       	brcc	.+30     	; 0x1244 <LCD_GOTO_XY+0x38>
		{
			LCD_SEND_A_COMMAND(0x80 + position);
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 58       	subi	r24, 0x80	; 128
    122a:	0e 94 27 09 	call	0x124e	; 0x124e <LCD_SEND_A_COMMAND>
    122e:	0a c0       	rjmp	.+20     	; 0x1244 <LCD_GOTO_XY+0x38>
		}
	}
	else if(line == 1)
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	39 f4       	brne	.+14     	; 0x1244 <LCD_GOTO_XY+0x38>
	{
		if(position < 16 && position >= 0)
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	80 31       	cpi	r24, 0x10	; 16
    123a:	20 f4       	brcc	.+8      	; 0x1244 <LCD_GOTO_XY+0x38>
		{
			LCD_SEND_A_COMMAND(0xC0 + position);
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 54       	subi	r24, 0x40	; 64
    1240:	0e 94 27 09 	call	0x124e	; 0x124e <LCD_SEND_A_COMMAND>
		}
	}
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <LCD_SEND_A_COMMAND>:

void LCD_SEND_A_COMMAND(unsigned char command)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	89 83       	std	Y+1, r24	; 0x01
#ifdef EIGHT_BIT_MODE
	LCD_IS_BUSY_CHECK();
    125a:	0e 94 c0 07 	call	0xf80	; 0xf80 <LCD_IS_BUSY_CHECK>
	LCD_PORT = command;
    125e:	eb e3       	ldi	r30, 0x3B	; 59
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	80 83       	st	Z, r24
	LCD_CONTROL &= ~(1<<RW | 1<<RS_SWITCH);
    1266:	a8 e3       	ldi	r26, 0x38	; 56
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e8 e3       	ldi	r30, 0x38	; 56
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	89 7f       	andi	r24, 0xF9	; 249
    1272:	8c 93       	st	X, r24

	LCD_KICK();
    1274:	0e 94 2d 07 	call	0xe5a	; 0xe5a <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CONTROL &= ~(1<<RW | 1<<RS_SWITCH);
	LCD_KICK();
#endif

}
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <SEND_A_CHAR>:

void SEND_A_CHAR(unsigned char character)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	0f 92       	push	r0
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
#ifdef EIGHT_BIT_MODE
	LCD_IS_BUSY_CHECK();
    128c:	0e 94 c0 07 	call	0xf80	; 0xf80 <LCD_IS_BUSY_CHECK>
	LCD_PORT = ((character) << DATA_SHIFT);
    1290:	eb e3       	ldi	r30, 0x3B	; 59
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	80 83       	st	Z, r24
	LCD_CONTROL &= ~(1<<RW);
    1298:	a8 e3       	ldi	r26, 0x38	; 56
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e8 e3       	ldi	r30, 0x38	; 56
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8b 7f       	andi	r24, 0xFB	; 251
    12a4:	8c 93       	st	X, r24
	LCD_CONTROL |= (1<<RS_SWITCH);
    12a6:	a8 e3       	ldi	r26, 0x38	; 56
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e8 e3       	ldi	r30, 0x38	; 56
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	82 60       	ori	r24, 0x02	; 2
    12b2:	8c 93       	st	X, r24

	LCD_KICK();
    12b4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
	LCD_CONTROL &= ~(1<<RW);
	LCD_CONTROL |= (1<<RS_SWITCH);
	LCD_KICK();
#endif
}
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <SEND_A_STRING>:

void SEND_A_STRING(char* string)
{	int count=0;
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <SEND_A_STRING+0x6>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <SEND_A_STRING+0x8>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    12d0:	1a 82       	std	Y+2, r1	; 0x02
    12d2:	19 82       	std	Y+1, r1	; 0x01
    12d4:	27 c0       	rjmp	.+78     	; 0x1324 <SEND_A_STRING+0x64>
	while(*string > 0)
	{
		count++;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
		SEND_A_CHAR(*string++);
    12e0:	eb 81       	ldd	r30, Y+3	; 0x03
    12e2:	fc 81       	ldd	r31, Y+4	; 0x04
    12e4:	20 81       	ld	r18, Z
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	8b 83       	std	Y+3, r24	; 0x03
    12f0:	82 2f       	mov	r24, r18
    12f2:	0e 94 40 09 	call	0x1280	; 0x1280 <SEND_A_CHAR>
		if(count == 16)
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	80 31       	cpi	r24, 0x10	; 16
    12fc:	91 05       	cpc	r25, r1
    12fe:	29 f4       	brne	.+10     	; 0x130a <SEND_A_STRING+0x4a>
		{
			LCD_GOTO_XY(1, 0);
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <SEND_A_STRING+0x64>
		}
		else if(count == 32)
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	80 32       	cpi	r24, 0x20	; 32
    1310:	91 05       	cpc	r25, r1
    1312:	41 f4       	brne	.+16     	; 0x1324 <SEND_A_STRING+0x64>
		{
			LCD_CLEAR_ALL_SCREEN();
    1314:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
			LCD_GOTO_XY(0,0);
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
			count=0;
    1320:	1a 82       	std	Y+2, r1	; 0x02
    1322:	19 82       	std	Y+1, r1	; 0x01
#endif
}

void SEND_A_STRING(char* string)
{	int count=0;
	while(*string > 0)
    1324:	eb 81       	ldd	r30, Y+3	; 0x03
    1326:	fc 81       	ldd	r31, Y+4	; 0x04
    1328:	80 81       	ld	r24, Z
    132a:	88 23       	and	r24, r24
    132c:	a1 f6       	brne	.-88     	; 0x12d6 <SEND_A_STRING+0x16>
			LCD_CLEAR_ALL_SCREEN();
			LCD_GOTO_XY(0,0);
			count=0;
		}
	}
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <LCD_DISPLAY_NUM>:

void LCD_DISPLAY_NUM(int num)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	29 97       	sbiw	r28, 0x09	; 9
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	99 87       	std	Y+9, r25	; 0x09
    1352:	88 87       	std	Y+8, r24	; 0x08
	char str[7];
	sprintf(str,"%d", num);
    1354:	00 d0       	rcall	.+0      	; 0x1356 <LCD_DISPLAY_NUM+0x1a>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <LCD_DISPLAY_NUM+0x1c>
    1358:	00 d0       	rcall	.+0      	; 0x135a <LCD_DISPLAY_NUM+0x1e>
    135a:	ed b7       	in	r30, 0x3d	; 61
    135c:	fe b7       	in	r31, 0x3e	; 62
    135e:	31 96       	adiw	r30, 0x01	; 1
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	91 83       	std	Z+1, r25	; 0x01
    1366:	80 83       	st	Z, r24
    1368:	8d e9       	ldi	r24, 0x9D	; 157
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	93 83       	std	Z+3, r25	; 0x03
    136e:	82 83       	std	Z+2, r24	; 0x02
    1370:	88 85       	ldd	r24, Y+8	; 0x08
    1372:	99 85       	ldd	r25, Y+9	; 0x09
    1374:	95 83       	std	Z+5, r25	; 0x05
    1376:	84 83       	std	Z+4, r24	; 0x04
    1378:	0e 94 9b 13 	call	0x2736	; 0x2736 <sprintf>
    137c:	8d b7       	in	r24, 0x3d	; 61
    137e:	9e b7       	in	r25, 0x3e	; 62
    1380:	06 96       	adiw	r24, 0x06	; 6
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	9e bf       	out	0x3e, r25	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	8d bf       	out	0x3d, r24	; 61
	SEND_A_STRING(str);
    138c:	ce 01       	movw	r24, r28
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
}
    1394:	29 96       	adiw	r28, 0x09	; 9
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <LCD_DISPLAY_REAL_NUM>:

void LCD_DISPLAY_REAL_NUM(double num)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	a8 97       	sbiw	r28, 0x28	; 40
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	6f 8f       	std	Y+31, r22	; 0x1f
    13bc:	78 a3       	std	Y+32, r23	; 0x20
    13be:	89 a3       	std	Y+33, r24	; 0x21
    13c0:	9a a3       	std	Y+34, r25	; 0x22
	char str[16];

	char* tmpsign = (num < 0) ? "-" : "";
    13c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13c4:	78 a1       	ldd	r23, Y+32	; 0x20
    13c6:	89 a1       	ldd	r24, Y+33	; 0x21
    13c8:	9a a1       	ldd	r25, Y+34	; 0x22
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13d6:	88 23       	and	r24, r24
    13d8:	2c f4       	brge	.+10     	; 0x13e4 <LCD_DISPLAY_REAL_NUM+0x3e>
    13da:	20 ea       	ldi	r18, 0xA0	; 160
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	38 a7       	std	Y+40, r19	; 0x28
    13e0:	2f a3       	std	Y+39, r18	; 0x27
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <LCD_DISPLAY_REAL_NUM+0x46>
    13e4:	42 ea       	ldi	r20, 0xA2	; 162
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	58 a7       	std	Y+40, r21	; 0x28
    13ea:	4f a3       	std	Y+39, r20	; 0x27
    13ec:	8f a1       	ldd	r24, Y+39	; 0x27
    13ee:	98 a5       	ldd	r25, Y+40	; 0x28
    13f0:	9e 87       	std	Y+14, r25	; 0x0e
    13f2:	8d 87       	std	Y+13, r24	; 0x0d
	float tmpval = (num < 0 ) ? -num:num; //625.132
    13f4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13f6:	78 a1       	ldd	r23, Y+32	; 0x20
    13f8:	89 a1       	ldd	r24, Y+33	; 0x21
    13fa:	9a a1       	ldd	r25, Y+34	; 0x22
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1408:	88 23       	and	r24, r24
    140a:	64 f4       	brge	.+24     	; 0x1424 <LCD_DISPLAY_REAL_NUM+0x7e>
    140c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    140e:	98 a1       	ldd	r25, Y+32	; 0x20
    1410:	a9 a1       	ldd	r26, Y+33	; 0x21
    1412:	ba a1       	ldd	r27, Y+34	; 0x22
    1414:	9c 01       	movw	r18, r24
    1416:	ad 01       	movw	r20, r26
    1418:	50 58       	subi	r21, 0x80	; 128
    141a:	2b a3       	std	Y+35, r18	; 0x23
    141c:	3c a3       	std	Y+36, r19	; 0x24
    141e:	4d a3       	std	Y+37, r20	; 0x25
    1420:	5e a3       	std	Y+38, r21	; 0x26
    1422:	08 c0       	rjmp	.+16     	; 0x1434 <LCD_DISPLAY_REAL_NUM+0x8e>
    1424:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1426:	98 a1       	ldd	r25, Y+32	; 0x20
    1428:	a9 a1       	ldd	r26, Y+33	; 0x21
    142a:	ba a1       	ldd	r27, Y+34	; 0x22
    142c:	8b a3       	std	Y+35, r24	; 0x23
    142e:	9c a3       	std	Y+36, r25	; 0x24
    1430:	ad a3       	std	Y+37, r26	; 0x25
    1432:	be a3       	std	Y+38, r27	; 0x26
    1434:	2b a1       	ldd	r18, Y+35	; 0x23
    1436:	3c a1       	ldd	r19, Y+36	; 0x24
    1438:	4d a1       	ldd	r20, Y+37	; 0x25
    143a:	5e a1       	ldd	r21, Y+38	; 0x26
    143c:	29 87       	std	Y+9, r18	; 0x09
    143e:	3a 87       	std	Y+10, r19	; 0x0a
    1440:	4b 87       	std	Y+11, r20	; 0x0b
    1442:	5c 87       	std	Y+12, r21	; 0x0c

	int tmpint1 = tmpval; //625
    1444:	69 85       	ldd	r22, Y+9	; 0x09
    1446:	7a 85       	ldd	r23, Y+10	; 0x0a
    1448:	8b 85       	ldd	r24, Y+11	; 0x0b
    144a:	9c 85       	ldd	r25, Y+12	; 0x0c
    144c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	98 87       	std	Y+8, r25	; 0x08
    1456:	8f 83       	std	Y+7, r24	; 0x07
	float tmpfrac = tmpval - tmpint1; //.132
    1458:	8f 81       	ldd	r24, Y+7	; 0x07
    145a:	98 85       	ldd	r25, Y+8	; 0x08
    145c:	aa 27       	eor	r26, r26
    145e:	97 fd       	sbrc	r25, 7
    1460:	a0 95       	com	r26
    1462:	ba 2f       	mov	r27, r26
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    146c:	9b 01       	movw	r18, r22
    146e:	ac 01       	movw	r20, r24
    1470:	69 85       	ldd	r22, Y+9	; 0x09
    1472:	7a 85       	ldd	r23, Y+10	; 0x0a
    1474:	8b 85       	ldd	r24, Y+11	; 0x0b
    1476:	9c 85       	ldd	r25, Y+12	; 0x0c
    1478:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	8b 83       	std	Y+3, r24	; 0x03
    1482:	9c 83       	std	Y+4, r25	; 0x04
    1484:	ad 83       	std	Y+5, r26	; 0x05
    1486:	be 83       	std	Y+6, r27	; 0x06
	int tmpint2 = tmpfrac*10000; //1320
    1488:	6b 81       	ldd	r22, Y+3	; 0x03
    148a:	7c 81       	ldd	r23, Y+4	; 0x04
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e4       	ldi	r19, 0x40	; 64
    1494:	4c e1       	ldi	r20, 0x1C	; 28
    1496:	56 e4       	ldi	r21, 0x46	; 70
    1498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01

	sprintf(str, "%s%d.%04d",tmpsign,tmpint1,tmpint2);
    14b0:	4d b7       	in	r20, 0x3d	; 61
    14b2:	5e b7       	in	r21, 0x3e	; 62
    14b4:	4a 50       	subi	r20, 0x0A	; 10
    14b6:	50 40       	sbci	r21, 0x00	; 0
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	5e bf       	out	0x3e, r21	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	4d bf       	out	0x3d, r20	; 61
    14c2:	ed b7       	in	r30, 0x3d	; 61
    14c4:	fe b7       	in	r31, 0x3e	; 62
    14c6:	31 96       	adiw	r30, 0x01	; 1
    14c8:	ce 01       	movw	r24, r28
    14ca:	0f 96       	adiw	r24, 0x0f	; 15
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
    14d0:	83 ea       	ldi	r24, 0xA3	; 163
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	93 83       	std	Z+3, r25	; 0x03
    14d6:	82 83       	std	Z+2, r24	; 0x02
    14d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14da:	9e 85       	ldd	r25, Y+14	; 0x0e
    14dc:	95 83       	std	Z+5, r25	; 0x05
    14de:	84 83       	std	Z+4, r24	; 0x04
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	97 83       	std	Z+7, r25	; 0x07
    14e6:	86 83       	std	Z+6, r24	; 0x06
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	91 87       	std	Z+9, r25	; 0x09
    14ee:	80 87       	std	Z+8, r24	; 0x08
    14f0:	0e 94 9b 13 	call	0x2736	; 0x2736 <sprintf>
    14f4:	8d b7       	in	r24, 0x3d	; 61
    14f6:	9e b7       	in	r25, 0x3e	; 62
    14f8:	0a 96       	adiw	r24, 0x0a	; 10
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	9e bf       	out	0x3e, r25	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	8d bf       	out	0x3d, r24	; 61
	SEND_A_STRING(str);
    1504:	ce 01       	movw	r24, r28
    1506:	0f 96       	adiw	r24, 0x0f	; 15
    1508:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>

}
    150c:	a8 96       	adiw	r28, 0x28	; 40
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <KPD_INIT>:
#include"../STD_TYPES.h"
#include"../util.h"
#include"../DIO/DIO.h"

void KPD_INIT(void)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
	//step1: configure row directions -> internal pullup -> input, value-> high
	DIO_SetPinDirection(KPD_R0_PORT, KPD_R0_PIN, DIO_INPUT);
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_R1_PORT, KPD_R1_PIN, DIO_INPUT);
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_R2_PORT, KPD_R2_PIN, DIO_INPUT);
    153a:	83 e0       	ldi	r24, 0x03	; 3
    153c:	62 e0       	ldi	r22, 0x02	; 2
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_R3_PORT, KPD_R3_PIN, DIO_INPUT);
    1544:	83 e0       	ldi	r24, 0x03	; 3
    1546:	63 e0       	ldi	r22, 0x03	; 3
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPinDirection>

	DIO_SetPinValue(KPD_R0_PORT,KPD_R0_PIN, DIO_HIGH);
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_R1_PORT, KPD_R1_PIN, DIO_HIGH);
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	41 e0       	ldi	r20, 0x01	; 1
    155e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_R2_PORT, KPD_R2_PIN, DIO_HIGH);
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	62 e0       	ldi	r22, 0x02	; 2
    1566:	41 e0       	ldi	r20, 0x01	; 1
    1568:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_R3_PORT, KPD_R3_PIN, DIO_HIGH);
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	63 e0       	ldi	r22, 0x03	; 3
    1570:	41 e0       	ldi	r20, 0x01	; 1
    1572:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_SetPinValue>

	//Step2: configure col directions ->output , value-> high
	DIO_SetPinDirection(KPD_C0_PORT, KPD_C0_PIN, DIO_OUTPUT);
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	64 e0       	ldi	r22, 0x04	; 4
    157a:	41 e0       	ldi	r20, 0x01	; 1
    157c:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_C1_PORT, KPD_C1_PIN, DIO_OUTPUT);
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	65 e0       	ldi	r22, 0x05	; 5
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_C2_PORT, KPD_C2_PIN, DIO_OUTPUT);
    158a:	83 e0       	ldi	r24, 0x03	; 3
    158c:	66 e0       	ldi	r22, 0x06	; 6
    158e:	41 e0       	ldi	r20, 0x01	; 1
    1590:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_C3_PORT, KPD_C3_PIN, DIO_OUTPUT);
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	67 e0       	ldi	r22, 0x07	; 7
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	0e 94 93 0c 	call	0x1926	; 0x1926 <DIO_SetPinDirection>

	DIO_SetPinValue(KPD_C0_PORT,KPD_C0_PIN, DIO_HIGH);
    159e:	83 e0       	ldi	r24, 0x03	; 3
    15a0:	64 e0       	ldi	r22, 0x04	; 4
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_C1_PORT, KPD_C1_PIN, DIO_HIGH);
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	65 e0       	ldi	r22, 0x05	; 5
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_C2_PORT, KPD_C2_PIN, DIO_HIGH);
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	66 e0       	ldi	r22, 0x06	; 6
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_C3_PORT, KPD_C3_PIN, DIO_HIGH);
    15bc:	83 e0       	ldi	r24, 0x03	; 3
    15be:	67 e0       	ldi	r22, 0x07	; 7
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_SetPinValue>
}
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <KPD_GETKEY>:
char KPD_GETKEY(void)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	e7 97       	sbiw	r28, 0x37	; 55
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
	u8 u8RowLocal=0, u8ColLocal=0;
    15e0:	19 8a       	std	Y+17, r1	; 0x11
    15e2:	18 8a       	std	Y+16, r1	; 0x10
	u8 u8PinValueLocal=0;
    15e4:	1f 86       	std	Y+15, r1	; 0x0f
	u8 KPD_u8RowPortArr[ROW_NUMBER] ={KPD_R0_PORT, KPD_R1_PORT,KPD_R2_PORT,KPD_R3_PORT };
    15e6:	83 e0       	ldi	r24, 0x03	; 3
    15e8:	8a 8b       	std	Y+18, r24	; 0x12
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	8b 8b       	std	Y+19, r24	; 0x13
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	8c 8b       	std	Y+20, r24	; 0x14
    15f2:	83 e0       	ldi	r24, 0x03	; 3
    15f4:	8d 8b       	std	Y+21, r24	; 0x15
	u8 KPD_u8RowPinArr[ROW_NUMBER] ={KPD_R0_PIN, KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN };
    15f6:	1e 8a       	std	Y+22, r1	; 0x16
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	8f 8b       	std	Y+23, r24	; 0x17
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	88 8f       	std	Y+24, r24	; 0x18
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	89 8f       	std	Y+25, r24	; 0x19

	u8 KPD_u8ColPortArr[COL_NUMBER] ={KPD_C0_PORT, KPD_C1_PORT,KPD_C2_PORT,KPD_C3_PORT };
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	8a 8f       	std	Y+26, r24	; 0x1a
    1608:	83 e0       	ldi	r24, 0x03	; 3
    160a:	8b 8f       	std	Y+27, r24	; 0x1b
    160c:	83 e0       	ldi	r24, 0x03	; 3
    160e:	8c 8f       	std	Y+28, r24	; 0x1c
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	8d 8f       	std	Y+29, r24	; 0x1d
	  u8 KPD_u8ColPinArr[COL_NUMBER] ={KPD_C0_PIN, KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};
    1614:	84 e0       	ldi	r24, 0x04	; 4
    1616:	8e 8f       	std	Y+30, r24	; 0x1e
    1618:	85 e0       	ldi	r24, 0x05	; 5
    161a:	8f 8f       	std	Y+31, r24	; 0x1f
    161c:	86 e0       	ldi	r24, 0x06	; 6
    161e:	88 a3       	std	Y+32, r24	; 0x20
    1620:	87 e0       	ldi	r24, 0x07	; 7
    1622:	89 a3       	std	Y+33, r24	; 0x21

	  u8 KDP_u8values[ROW_NUMBER][COL_NUMBER] = KPD_VALUES;
    1624:	ce 01       	movw	r24, r28
    1626:	82 96       	adiw	r24, 0x22	; 34
    1628:	9c ab       	std	Y+52, r25	; 0x34
    162a:	8b ab       	std	Y+51, r24	; 0x33
    162c:	ee e3       	ldi	r30, 0x3E	; 62
    162e:	f2 e0       	ldi	r31, 0x02	; 2
    1630:	fe ab       	std	Y+54, r31	; 0x36
    1632:	ed ab       	std	Y+53, r30	; 0x35
    1634:	f0 e1       	ldi	r31, 0x10	; 16
    1636:	ff ab       	std	Y+55, r31	; 0x37
    1638:	ed a9       	ldd	r30, Y+53	; 0x35
    163a:	fe a9       	ldd	r31, Y+54	; 0x36
    163c:	00 80       	ld	r0, Z
    163e:	8d a9       	ldd	r24, Y+53	; 0x35
    1640:	9e a9       	ldd	r25, Y+54	; 0x36
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	9e ab       	std	Y+54, r25	; 0x36
    1646:	8d ab       	std	Y+53, r24	; 0x35
    1648:	eb a9       	ldd	r30, Y+51	; 0x33
    164a:	fc a9       	ldd	r31, Y+52	; 0x34
    164c:	00 82       	st	Z, r0
    164e:	8b a9       	ldd	r24, Y+51	; 0x33
    1650:	9c a9       	ldd	r25, Y+52	; 0x34
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	9c ab       	std	Y+52, r25	; 0x34
    1656:	8b ab       	std	Y+51, r24	; 0x33
    1658:	9f a9       	ldd	r25, Y+55	; 0x37
    165a:	91 50       	subi	r25, 0x01	; 1
    165c:	9f ab       	std	Y+55, r25	; 0x37
    165e:	ef a9       	ldd	r30, Y+55	; 0x37
    1660:	ee 23       	and	r30, r30
    1662:	51 f7       	brne	.-44     	; 0x1638 <KPD_GETKEY+0x6c>

	for(u8ColLocal=0 ;u8ColLocal < COL_NUMBER; u8ColLocal++)
    1664:	18 8a       	std	Y+16, r1	; 0x10
    1666:	0e c1       	rjmp	.+540    	; 0x1884 <KPD_GETKEY+0x2b8>
	{
		DIO_SetPinValue(KPD_u8ColPortArr[u8ColLocal],KPD_u8ColPinArr[u8ColLocal], DIO_LOW);
    1668:	88 89       	ldd	r24, Y+16	; 0x10
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	ce 01       	movw	r24, r28
    1670:	4a 96       	adiw	r24, 0x1a	; 26
    1672:	fc 01       	movw	r30, r24
    1674:	e2 0f       	add	r30, r18
    1676:	f3 1f       	adc	r31, r19
    1678:	40 81       	ld	r20, Z
    167a:	88 89       	ldd	r24, Y+16	; 0x10
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	ce 01       	movw	r24, r28
    1682:	4e 96       	adiw	r24, 0x1e	; 30
    1684:	fc 01       	movw	r30, r24
    1686:	e2 0f       	add	r30, r18
    1688:	f3 1f       	adc	r31, r19
    168a:	90 81       	ld	r25, Z
    168c:	84 2f       	mov	r24, r20
    168e:	69 2f       	mov	r22, r25
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_SetPinValue>

		for(u8RowLocal=0;u8RowLocal < ROW_NUMBER; u8RowLocal++ )
    1696:	19 8a       	std	Y+17, r1	; 0x11
    1698:	d7 c0       	rjmp	.+430    	; 0x1848 <KPD_GETKEY+0x27c>
		{
			u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);
    169a:	89 89       	ldd	r24, Y+17	; 0x11
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	ce 01       	movw	r24, r28
    16a2:	42 96       	adiw	r24, 0x12	; 18
    16a4:	fc 01       	movw	r30, r24
    16a6:	e2 0f       	add	r30, r18
    16a8:	f3 1f       	adc	r31, r19
    16aa:	40 81       	ld	r20, Z
    16ac:	89 89       	ldd	r24, Y+17	; 0x11
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	ce 01       	movw	r24, r28
    16b4:	46 96       	adiw	r24, 0x16	; 22
    16b6:	fc 01       	movw	r30, r24
    16b8:	e2 0f       	add	r30, r18
    16ba:	f3 1f       	adc	r31, r19
    16bc:	90 81       	ld	r25, Z
    16be:	84 2f       	mov	r24, r20
    16c0:	69 2f       	mov	r22, r25
    16c2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <DIO_GetPinValue>
    16c6:	8f 87       	std	Y+15, r24	; 0x0f
			if(u8PinValueLocal == KPD_PRESSED_KEY)
    16c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ca:	88 23       	and	r24, r24
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <KPD_GETKEY+0x104>
    16ce:	b9 c0       	rjmp	.+370    	; 0x1842 <KPD_GETKEY+0x276>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a8 e4       	ldi	r26, 0x48	; 72
    16d6:	b2 e4       	ldi	r27, 0x42	; 66
    16d8:	8b 87       	std	Y+11, r24	; 0x0b
    16da:	9c 87       	std	Y+12, r25	; 0x0c
    16dc:	ad 87       	std	Y+13, r26	; 0x0d
    16de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4a ef       	ldi	r20, 0xFA	; 250
    16ee:	54 e4       	ldi	r21, 0x44	; 68
    16f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8f 83       	std	Y+7, r24	; 0x07
    16fa:	98 87       	std	Y+8, r25	; 0x08
    16fc:	a9 87       	std	Y+9, r26	; 0x09
    16fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e8       	ldi	r20, 0x80	; 128
    170e:	5f e3       	ldi	r21, 0x3F	; 63
    1710:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1714:	88 23       	and	r24, r24
    1716:	2c f4       	brge	.+10     	; 0x1722 <KPD_GETKEY+0x156>
		__ticks = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	3f c0       	rjmp	.+126    	; 0x17a0 <KPD_GETKEY+0x1d4>
	else if (__tmp > 65535)
    1722:	6f 81       	ldd	r22, Y+7	; 0x07
    1724:	78 85       	ldd	r23, Y+8	; 0x08
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	4f e7       	ldi	r20, 0x7F	; 127
    1730:	57 e4       	ldi	r21, 0x47	; 71
    1732:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1736:	18 16       	cp	r1, r24
    1738:	4c f5       	brge	.+82     	; 0x178c <KPD_GETKEY+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173a:	6b 85       	ldd	r22, Y+11	; 0x0b
    173c:	7c 85       	ldd	r23, Y+12	; 0x0c
    173e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1740:	9e 85       	ldd	r25, Y+14	; 0x0e
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	51 e4       	ldi	r21, 0x41	; 65
    174a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <KPD_GETKEY+0x1b6>
    1764:	88 ec       	ldi	r24, 0xC8	; 200
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9c 83       	std	Y+4, r25	; 0x04
    176a:	8b 83       	std	Y+3, r24	; 0x03
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <KPD_GETKEY+0x1a4>
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	69 f7       	brne	.-38     	; 0x1764 <KPD_GETKEY+0x198>
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <KPD_GETKEY+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <KPD_GETKEY+0x1e0>
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);
    17b4:	89 89       	ldd	r24, Y+17	; 0x11
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	ce 01       	movw	r24, r28
    17bc:	42 96       	adiw	r24, 0x12	; 18
    17be:	fc 01       	movw	r30, r24
    17c0:	e2 0f       	add	r30, r18
    17c2:	f3 1f       	adc	r31, r19
    17c4:	40 81       	ld	r20, Z
    17c6:	89 89       	ldd	r24, Y+17	; 0x11
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	ce 01       	movw	r24, r28
    17ce:	46 96       	adiw	r24, 0x16	; 22
    17d0:	fc 01       	movw	r30, r24
    17d2:	e2 0f       	add	r30, r18
    17d4:	f3 1f       	adc	r31, r19
    17d6:	90 81       	ld	r25, Z
    17d8:	84 2f       	mov	r24, r20
    17da:	69 2f       	mov	r22, r25
    17dc:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <DIO_GetPinValue>
    17e0:	8f 87       	std	Y+15, r24	; 0x0f
    17e2:	17 c0       	rjmp	.+46     	; 0x1812 <KPD_GETKEY+0x246>
				while(u8PinValueLocal == KPD_PRESSED_KEY)
				{
					u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);
    17e4:	89 89       	ldd	r24, Y+17	; 0x11
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	ce 01       	movw	r24, r28
    17ec:	42 96       	adiw	r24, 0x12	; 18
    17ee:	fc 01       	movw	r30, r24
    17f0:	e2 0f       	add	r30, r18
    17f2:	f3 1f       	adc	r31, r19
    17f4:	40 81       	ld	r20, Z
    17f6:	89 89       	ldd	r24, Y+17	; 0x11
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	ce 01       	movw	r24, r28
    17fe:	46 96       	adiw	r24, 0x16	; 22
    1800:	fc 01       	movw	r30, r24
    1802:	e2 0f       	add	r30, r18
    1804:	f3 1f       	adc	r31, r19
    1806:	90 81       	ld	r25, Z
    1808:	84 2f       	mov	r24, r20
    180a:	69 2f       	mov	r22, r25
    180c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <DIO_GetPinValue>
    1810:	8f 87       	std	Y+15, r24	; 0x0f
			u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);
			if(u8PinValueLocal == KPD_PRESSED_KEY)
			{
				_delay_ms(50);
				u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);
				while(u8PinValueLocal == KPD_PRESSED_KEY)
    1812:	8f 85       	ldd	r24, Y+15	; 0x0f
    1814:	88 23       	and	r24, r24
    1816:	31 f3       	breq	.-52     	; 0x17e4 <KPD_GETKEY+0x218>
				{
					u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);

				}
				return KDP_u8values[u8RowLocal][u8ColLocal];
    1818:	89 89       	ldd	r24, Y+17	; 0x11
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	88 89       	ldd	r24, Y+16	; 0x10
    1820:	48 2f       	mov	r20, r24
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	22 0f       	add	r18, r18
    1826:	33 1f       	adc	r19, r19
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	ce 01       	movw	r24, r28
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	82 0f       	add	r24, r18
    1832:	93 1f       	adc	r25, r19
    1834:	84 0f       	add	r24, r20
    1836:	95 1f       	adc	r25, r21
    1838:	fc 01       	movw	r30, r24
    183a:	b1 96       	adiw	r30, 0x21	; 33
    183c:	80 81       	ld	r24, Z
    183e:	8a ab       	std	Y+50, r24	; 0x32
    1840:	27 c0       	rjmp	.+78     	; 0x1890 <KPD_GETKEY+0x2c4>

	for(u8ColLocal=0 ;u8ColLocal < COL_NUMBER; u8ColLocal++)
	{
		DIO_SetPinValue(KPD_u8ColPortArr[u8ColLocal],KPD_u8ColPinArr[u8ColLocal], DIO_LOW);

		for(u8RowLocal=0;u8RowLocal < ROW_NUMBER; u8RowLocal++ )
    1842:	89 89       	ldd	r24, Y+17	; 0x11
    1844:	8f 5f       	subi	r24, 0xFF	; 255
    1846:	89 8b       	std	Y+17, r24	; 0x11
    1848:	89 89       	ldd	r24, Y+17	; 0x11
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	08 f4       	brcc	.+2      	; 0x1850 <KPD_GETKEY+0x284>
    184e:	25 cf       	rjmp	.-438    	; 0x169a <KPD_GETKEY+0xce>

				}
				return KDP_u8values[u8RowLocal][u8ColLocal];
			}
		}
		DIO_SetPinValue(KPD_u8ColPortArr[u8ColLocal], KPD_u8ColPinArr[u8ColLocal], DIO_HIGH);
    1850:	88 89       	ldd	r24, Y+16	; 0x10
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	ce 01       	movw	r24, r28
    1858:	4a 96       	adiw	r24, 0x1a	; 26
    185a:	fc 01       	movw	r30, r24
    185c:	e2 0f       	add	r30, r18
    185e:	f3 1f       	adc	r31, r19
    1860:	40 81       	ld	r20, Z
    1862:	88 89       	ldd	r24, Y+16	; 0x10
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	ce 01       	movw	r24, r28
    186a:	4e 96       	adiw	r24, 0x1e	; 30
    186c:	fc 01       	movw	r30, r24
    186e:	e2 0f       	add	r30, r18
    1870:	f3 1f       	adc	r31, r19
    1872:	90 81       	ld	r25, Z
    1874:	84 2f       	mov	r24, r20
    1876:	69 2f       	mov	r22, r25
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <DIO_SetPinValue>
	u8 KPD_u8ColPortArr[COL_NUMBER] ={KPD_C0_PORT, KPD_C1_PORT,KPD_C2_PORT,KPD_C3_PORT };
	  u8 KPD_u8ColPinArr[COL_NUMBER] ={KPD_C0_PIN, KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};

	  u8 KDP_u8values[ROW_NUMBER][COL_NUMBER] = KPD_VALUES;

	for(u8ColLocal=0 ;u8ColLocal < COL_NUMBER; u8ColLocal++)
    187e:	88 89       	ldd	r24, Y+16	; 0x10
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	88 8b       	std	Y+16, r24	; 0x10
    1884:	88 89       	ldd	r24, Y+16	; 0x10
    1886:	84 30       	cpi	r24, 0x04	; 4
    1888:	08 f4       	brcc	.+2      	; 0x188c <KPD_GETKEY+0x2c0>
    188a:	ee ce       	rjmp	.-548    	; 0x1668 <KPD_GETKEY+0x9c>
				return KDP_u8values[u8RowLocal][u8ColLocal];
			}
		}
		DIO_SetPinValue(KPD_u8ColPortArr[u8ColLocal], KPD_u8ColPinArr[u8ColLocal], DIO_HIGH);
	}
	return KPD_NOT_PRESSED;
    188c:	9f ef       	ldi	r25, 0xFF	; 255
    188e:	9a ab       	std	Y+50, r25	; 0x32
    1890:	8a a9       	ldd	r24, Y+50	; 0x32
}
    1892:	e7 96       	adiw	r28, 0x37	; 55
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <DIO_SetPortDirection>:
#include"DIO.h"


//set port direction
void DIO_SetPortDirection(u8 u8PortIdCopy,u8 u8PortDirCopy)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <DIO_SetPortDirection+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <DIO_SetPortDirection+0x8>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy)
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3c 83       	std	Y+4, r19	; 0x04
    18bc:	2b 83       	std	Y+3, r18	; 0x03
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	91 05       	cpc	r25, r1
    18c6:	d1 f0       	breq	.+52     	; 0x18fc <DIO_SetPortDirection+0x58>
    18c8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ca:	3c 81       	ldd	r19, Y+4	; 0x04
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	2c f4       	brge	.+10     	; 0x18dc <DIO_SetPortDirection+0x38>
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	61 f0       	breq	.+24     	; 0x18f2 <DIO_SetPortDirection+0x4e>
    18da:	1e c0       	rjmp	.+60     	; 0x1918 <DIO_SetPortDirection+0x74>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	81 f0       	breq	.+32     	; 0x1906 <DIO_SetPortDirection+0x62>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	91 05       	cpc	r25, r1
    18ee:	81 f0       	breq	.+32     	; 0x1910 <DIO_SetPortDirection+0x6c>
    18f0:	13 c0       	rjmp	.+38     	; 0x1918 <DIO_SetPortDirection+0x74>
	{
	case DIO_PORTA: DDRA = u8PortDirCopy; break;
    18f2:	ea e3       	ldi	r30, 0x3A	; 58
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	80 83       	st	Z, r24
    18fa:	0e c0       	rjmp	.+28     	; 0x1918 <DIO_SetPortDirection+0x74>
	case DIO_PORTB: DDRB = u8PortDirCopy; break;
    18fc:	e7 e3       	ldi	r30, 0x37	; 55
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	80 83       	st	Z, r24
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <DIO_SetPortDirection+0x74>
	case DIO_PORTC: DDRC = u8PortDirCopy; break;
    1906:	e4 e3       	ldi	r30, 0x34	; 52
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	80 83       	st	Z, r24
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <DIO_SetPortDirection+0x74>
	case DIO_PORTD: DDRD = u8PortDirCopy; break;
    1910:	e1 e3       	ldi	r30, 0x31	; 49
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	80 83       	st	Z, r24
	}
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <DIO_SetPinDirection>:

//set pin direction
void DIO_SetPinDirection(u8 u8PortIdCopy,u8 u8PinIdCopy, u8 u8PinDirCopy )
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	27 97       	sbiw	r28, 0x07	; 7
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	6a 83       	std	Y+2, r22	; 0x02
    193e:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortIdCopy <= DIO_PORTD)&&(u8PinIdCopy <= DIO_PIN7))
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	08 f0       	brcs	.+2      	; 0x1948 <DIO_SetPinDirection+0x22>
    1946:	ee c0       	rjmp	.+476    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	88 30       	cpi	r24, 0x08	; 8
    194c:	08 f0       	brcs	.+2      	; 0x1950 <DIO_SetPinDirection+0x2a>
    194e:	ea c0       	rjmp	.+468    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
	{
		if(u8PinDirCopy==DIO_OUTPUT)
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	09 f0       	breq	.+2      	; 0x1958 <DIO_SetPinDirection+0x32>
    1956:	6f c0       	rjmp	.+222    	; 0x1a36 <DIO_SetPinDirection+0x110>
		{
			switch(u8PortIdCopy)
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3f 83       	std	Y+7, r19	; 0x07
    1960:	2e 83       	std	Y+6, r18	; 0x06
    1962:	8e 81       	ldd	r24, Y+6	; 0x06
    1964:	9f 81       	ldd	r25, Y+7	; 0x07
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	91 05       	cpc	r25, r1
    196a:	49 f1       	breq	.+82     	; 0x19be <DIO_SetPinDirection+0x98>
    196c:	2e 81       	ldd	r18, Y+6	; 0x06
    196e:	3f 81       	ldd	r19, Y+7	; 0x07
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	2c f4       	brge	.+10     	; 0x1980 <DIO_SetPinDirection+0x5a>
    1976:	8e 81       	ldd	r24, Y+6	; 0x06
    1978:	9f 81       	ldd	r25, Y+7	; 0x07
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	61 f0       	breq	.+24     	; 0x1996 <DIO_SetPinDirection+0x70>
    197e:	d2 c0       	rjmp	.+420    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
    1980:	2e 81       	ldd	r18, Y+6	; 0x06
    1982:	3f 81       	ldd	r19, Y+7	; 0x07
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	71 f1       	breq	.+92     	; 0x19e6 <DIO_SetPinDirection+0xc0>
    198a:	8e 81       	ldd	r24, Y+6	; 0x06
    198c:	9f 81       	ldd	r25, Y+7	; 0x07
    198e:	83 30       	cpi	r24, 0x03	; 3
    1990:	91 05       	cpc	r25, r1
    1992:	e9 f1       	breq	.+122    	; 0x1a0e <DIO_SetPinDirection+0xe8>
    1994:	c7 c0       	rjmp	.+398    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
			{
			case DIO_PORTA: Set_Bit(DDRA, u8PinIdCopy); break;
    1996:	aa e3       	ldi	r26, 0x3A	; 58
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	ea e3       	ldi	r30, 0x3A	; 58
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <DIO_SetPinDirection+0x8e>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <DIO_SetPinDirection+0x8a>
    19b8:	84 2b       	or	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	b3 c0       	rjmp	.+358    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
			case DIO_PORTB: Set_Bit(DDRB, u8PinIdCopy); break;
    19be:	a7 e3       	ldi	r26, 0x37	; 55
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e7 e3       	ldi	r30, 0x37	; 55
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_SetPinDirection+0xb6>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_SetPinDirection+0xb2>
    19e0:	84 2b       	or	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	9f c0       	rjmp	.+318    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
			case DIO_PORTC: Set_Bit(DDRC, u8PinIdCopy); break;
    19e6:	a4 e3       	ldi	r26, 0x34	; 52
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e4 e3       	ldi	r30, 0x34	; 52
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <DIO_SetPinDirection+0xde>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <DIO_SetPinDirection+0xda>
    1a08:	84 2b       	or	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	8b c0       	rjmp	.+278    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
			case DIO_PORTD: Set_Bit(DDRD, u8PinIdCopy); break;
    1a0e:	a1 e3       	ldi	r26, 0x31	; 49
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e1 e3       	ldi	r30, 0x31	; 49
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_SetPinDirection+0x106>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_SetPinDirection+0x102>
    1a30:	84 2b       	or	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	77 c0       	rjmp	.+238    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
			}
		}
		else if(u8PinDirCopy==DIO_INPUT)
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	88 23       	and	r24, r24
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <DIO_SetPinDirection+0x118>
    1a3c:	73 c0       	rjmp	.+230    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
		{
			switch(u8PortIdCopy)
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3d 83       	std	Y+5, r19	; 0x05
    1a46:	2c 83       	std	Y+4, r18	; 0x04
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	91 05       	cpc	r25, r1
    1a50:	59 f1       	breq	.+86     	; 0x1aa8 <DIO_SetPinDirection+0x182>
    1a52:	2c 81       	ldd	r18, Y+4	; 0x04
    1a54:	3d 81       	ldd	r19, Y+5	; 0x05
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <DIO_SetPinDirection+0x140>
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	69 f0       	breq	.+26     	; 0x1a7e <DIO_SetPinDirection+0x158>
    1a64:	5f c0       	rjmp	.+190    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
    1a66:	2c 81       	ldd	r18, Y+4	; 0x04
    1a68:	3d 81       	ldd	r19, Y+5	; 0x05
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	89 f1       	breq	.+98     	; 0x1ad2 <DIO_SetPinDirection+0x1ac>
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	91 05       	cpc	r25, r1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <DIO_SetPinDirection+0x156>
    1a7a:	40 c0       	rjmp	.+128    	; 0x1afc <DIO_SetPinDirection+0x1d6>
    1a7c:	53 c0       	rjmp	.+166    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
			{
			case DIO_PORTA: Clear_Bit(DDRA, u8PinIdCopy); break;
    1a7e:	aa e3       	ldi	r26, 0x3A	; 58
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	ea e3       	ldi	r30, 0x3A	; 58
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <DIO_SetPinDirection+0x176>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <DIO_SetPinDirection+0x172>
    1aa0:	80 95       	com	r24
    1aa2:	84 23       	and	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	3e c0       	rjmp	.+124    	; 0x1b24 <DIO_SetPinDirection+0x1fe>
			case DIO_PORTB: Clear_Bit(DDRB, u8PinIdCopy); break;
    1aa8:	a7 e3       	ldi	r26, 0x37	; 55
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e7 e3       	ldi	r30, 0x37	; 55
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_SetPinDirection+0x1a0>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <DIO_SetPinDirection+0x19c>
    1aca:	80 95       	com	r24
    1acc:	84 23       	and	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	29 c0       	rjmp	.+82     	; 0x1b24 <DIO_SetPinDirection+0x1fe>
			case DIO_PORTC: Clear_Bit(DDRC, u8PinIdCopy); break;
    1ad2:	a4 e3       	ldi	r26, 0x34	; 52
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e4 e3       	ldi	r30, 0x34	; 52
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	48 2f       	mov	r20, r24
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 2e       	mov	r0, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_SetPinDirection+0x1ca>
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	0a 94       	dec	r0
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_SetPinDirection+0x1c6>
    1af4:	80 95       	com	r24
    1af6:	84 23       	and	r24, r20
    1af8:	8c 93       	st	X, r24
    1afa:	14 c0       	rjmp	.+40     	; 0x1b24 <DIO_SetPinDirection+0x1fe>
			case DIO_PORTD: Clear_Bit(DDRD, u8PinIdCopy); break;
    1afc:	a1 e3       	ldi	r26, 0x31	; 49
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e1 e3       	ldi	r30, 0x31	; 49
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	48 2f       	mov	r20, r24
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	02 2e       	mov	r0, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <DIO_SetPinDirection+0x1f4>
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	0a 94       	dec	r0
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <DIO_SetPinDirection+0x1f0>
    1b1e:	80 95       	com	r24
    1b20:	84 23       	and	r24, r20
    1b22:	8c 93       	st	X, r24
			}
		}
	}
}
    1b24:	27 96       	adiw	r28, 0x07	; 7
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <DIO_SetPortValue>:
//set port value
void DIO_SetPortValue(u8 u8PortIdCopy,u8 u8PortValCopy)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <DIO_SetPortValue+0x6>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <DIO_SetPortValue+0x8>
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy)
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	3c 83       	std	Y+4, r19	; 0x04
    1b4e:	2b 83       	std	Y+3, r18	; 0x03
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	81 30       	cpi	r24, 0x01	; 1
    1b56:	91 05       	cpc	r25, r1
    1b58:	d1 f0       	breq	.+52     	; 0x1b8e <DIO_SetPortValue+0x58>
    1b5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5e:	22 30       	cpi	r18, 0x02	; 2
    1b60:	31 05       	cpc	r19, r1
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <DIO_SetPortValue+0x38>
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	61 f0       	breq	.+24     	; 0x1b84 <DIO_SetPortValue+0x4e>
    1b6c:	1e c0       	rjmp	.+60     	; 0x1baa <DIO_SetPortValue+0x74>
    1b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b70:	3c 81       	ldd	r19, Y+4	; 0x04
    1b72:	22 30       	cpi	r18, 0x02	; 2
    1b74:	31 05       	cpc	r19, r1
    1b76:	81 f0       	breq	.+32     	; 0x1b98 <DIO_SetPortValue+0x62>
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	91 05       	cpc	r25, r1
    1b80:	81 f0       	breq	.+32     	; 0x1ba2 <DIO_SetPortValue+0x6c>
    1b82:	13 c0       	rjmp	.+38     	; 0x1baa <DIO_SetPortValue+0x74>
	{
	case DIO_PORTA: PORTA = u8PortValCopy; break;
    1b84:	eb e3       	ldi	r30, 0x3B	; 59
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	80 83       	st	Z, r24
    1b8c:	0e c0       	rjmp	.+28     	; 0x1baa <DIO_SetPortValue+0x74>
	case DIO_PORTB: PORTB = u8PortValCopy; break;
    1b8e:	e8 e3       	ldi	r30, 0x38	; 56
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	80 83       	st	Z, r24
    1b96:	09 c0       	rjmp	.+18     	; 0x1baa <DIO_SetPortValue+0x74>
	case DIO_PORTC: PORTC = u8PortValCopy; break;
    1b98:	e5 e3       	ldi	r30, 0x35	; 53
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	80 83       	st	Z, r24
    1ba0:	04 c0       	rjmp	.+8      	; 0x1baa <DIO_SetPortValue+0x74>
	case DIO_PORTD: PORTD = u8PortValCopy; break;
    1ba2:	e2 e3       	ldi	r30, 0x32	; 50
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	80 83       	st	Z, r24
	}
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <DIO_SetPinValue>:
//set pin value
void DIO_SetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy, u8 u8PinValCopy)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	27 97       	sbiw	r28, 0x07	; 7
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	6a 83       	std	Y+2, r22	; 0x02
    1bd0:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortIdCopy <= DIO_PORTD)&&(u8PinIdCopy <= DIO_PIN7))
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	84 30       	cpi	r24, 0x04	; 4
    1bd6:	08 f0       	brcs	.+2      	; 0x1bda <DIO_SetPinValue+0x22>
    1bd8:	ee c0       	rjmp	.+476    	; 0x1db6 <DIO_SetPinValue+0x1fe>
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	88 30       	cpi	r24, 0x08	; 8
    1bde:	08 f0       	brcs	.+2      	; 0x1be2 <DIO_SetPinValue+0x2a>
    1be0:	ea c0       	rjmp	.+468    	; 0x1db6 <DIO_SetPinValue+0x1fe>
		{
			if(u8PinValCopy == DIO_HIGH)
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	09 f0       	breq	.+2      	; 0x1bea <DIO_SetPinValue+0x32>
    1be8:	6f c0       	rjmp	.+222    	; 0x1cc8 <DIO_SetPinValue+0x110>
			{
				switch(u8PortIdCopy)
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	3f 83       	std	Y+7, r19	; 0x07
    1bf2:	2e 83       	std	Y+6, r18	; 0x06
    1bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	49 f1       	breq	.+82     	; 0x1c50 <DIO_SetPinValue+0x98>
    1bfe:	2e 81       	ldd	r18, Y+6	; 0x06
    1c00:	3f 81       	ldd	r19, Y+7	; 0x07
    1c02:	22 30       	cpi	r18, 0x02	; 2
    1c04:	31 05       	cpc	r19, r1
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <DIO_SetPinValue+0x5a>
    1c08:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	61 f0       	breq	.+24     	; 0x1c28 <DIO_SetPinValue+0x70>
    1c10:	d2 c0       	rjmp	.+420    	; 0x1db6 <DIO_SetPinValue+0x1fe>
    1c12:	2e 81       	ldd	r18, Y+6	; 0x06
    1c14:	3f 81       	ldd	r19, Y+7	; 0x07
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	71 f1       	breq	.+92     	; 0x1c78 <DIO_SetPinValue+0xc0>
    1c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c20:	83 30       	cpi	r24, 0x03	; 3
    1c22:	91 05       	cpc	r25, r1
    1c24:	e9 f1       	breq	.+122    	; 0x1ca0 <DIO_SetPinValue+0xe8>
    1c26:	c7 c0       	rjmp	.+398    	; 0x1db6 <DIO_SetPinValue+0x1fe>
				{
				case DIO_PORTA: Set_Bit(PORTA, u8PinIdCopy); break;
    1c28:	ab e3       	ldi	r26, 0x3B	; 59
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	eb e3       	ldi	r30, 0x3B	; 59
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	48 2f       	mov	r20, r24
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	02 2e       	mov	r0, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <DIO_SetPinValue+0x8e>
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	0a 94       	dec	r0
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <DIO_SetPinValue+0x8a>
    1c4a:	84 2b       	or	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	b3 c0       	rjmp	.+358    	; 0x1db6 <DIO_SetPinValue+0x1fe>
				case DIO_PORTB: Set_Bit(PORTB, u8PinIdCopy); break;
    1c50:	a8 e3       	ldi	r26, 0x38	; 56
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e8 e3       	ldi	r30, 0x38	; 56
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_SetPinValue+0xb6>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <DIO_SetPinValue+0xb2>
    1c72:	84 2b       	or	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	9f c0       	rjmp	.+318    	; 0x1db6 <DIO_SetPinValue+0x1fe>
				case DIO_PORTC: Set_Bit(PORTC, u8PinIdCopy); break;
    1c78:	a5 e3       	ldi	r26, 0x35	; 53
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e5 e3       	ldi	r30, 0x35	; 53
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <DIO_SetPinValue+0xde>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <DIO_SetPinValue+0xda>
    1c9a:	84 2b       	or	r24, r20
    1c9c:	8c 93       	st	X, r24
    1c9e:	8b c0       	rjmp	.+278    	; 0x1db6 <DIO_SetPinValue+0x1fe>
				case DIO_PORTD: Set_Bit(PORTD, u8PinIdCopy); break;
    1ca0:	a2 e3       	ldi	r26, 0x32	; 50
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e2 e3       	ldi	r30, 0x32	; 50
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	48 2f       	mov	r20, r24
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	02 2e       	mov	r0, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <DIO_SetPinValue+0x106>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	0a 94       	dec	r0
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <DIO_SetPinValue+0x102>
    1cc2:	84 2b       	or	r24, r20
    1cc4:	8c 93       	st	X, r24
    1cc6:	77 c0       	rjmp	.+238    	; 0x1db6 <DIO_SetPinValue+0x1fe>
				}
			}
			else if(u8PinValCopy == DIO_LOW)
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	88 23       	and	r24, r24
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <DIO_SetPinValue+0x118>
    1cce:	73 c0       	rjmp	.+230    	; 0x1db6 <DIO_SetPinValue+0x1fe>
			{
				switch(u8PortIdCopy)
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	3d 83       	std	Y+5, r19	; 0x05
    1cd8:	2c 83       	std	Y+4, r18	; 0x04
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	59 f1       	breq	.+86     	; 0x1d3a <DIO_SetPinValue+0x182>
    1ce4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <DIO_SetPinValue+0x140>
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	69 f0       	breq	.+26     	; 0x1d10 <DIO_SetPinValue+0x158>
    1cf6:	5f c0       	rjmp	.+190    	; 0x1db6 <DIO_SetPinValue+0x1fe>
    1cf8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	89 f1       	breq	.+98     	; 0x1d64 <DIO_SetPinValue+0x1ac>
    1d02:	8c 81       	ldd	r24, Y+4	; 0x04
    1d04:	9d 81       	ldd	r25, Y+5	; 0x05
    1d06:	83 30       	cpi	r24, 0x03	; 3
    1d08:	91 05       	cpc	r25, r1
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <DIO_SetPinValue+0x156>
    1d0c:	40 c0       	rjmp	.+128    	; 0x1d8e <DIO_SetPinValue+0x1d6>
    1d0e:	53 c0       	rjmp	.+166    	; 0x1db6 <DIO_SetPinValue+0x1fe>
				{
				case DIO_PORTA: Clear_Bit(PORTA, u8PinIdCopy); break;
    1d10:	ab e3       	ldi	r26, 0x3B	; 59
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	eb e3       	ldi	r30, 0x3B	; 59
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 2e       	mov	r0, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_SetPinValue+0x176>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	0a 94       	dec	r0
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <DIO_SetPinValue+0x172>
    1d32:	80 95       	com	r24
    1d34:	84 23       	and	r24, r20
    1d36:	8c 93       	st	X, r24
    1d38:	3e c0       	rjmp	.+124    	; 0x1db6 <DIO_SetPinValue+0x1fe>
				case DIO_PORTB: Clear_Bit(PORTB, u8PinIdCopy); break;
    1d3a:	a8 e3       	ldi	r26, 0x38	; 56
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e8 e3       	ldi	r30, 0x38	; 56
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	48 2f       	mov	r20, r24
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	02 2e       	mov	r0, r18
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <DIO_SetPinValue+0x1a0>
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	0a 94       	dec	r0
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <DIO_SetPinValue+0x19c>
    1d5c:	80 95       	com	r24
    1d5e:	84 23       	and	r24, r20
    1d60:	8c 93       	st	X, r24
    1d62:	29 c0       	rjmp	.+82     	; 0x1db6 <DIO_SetPinValue+0x1fe>
				case DIO_PORTC: Clear_Bit(PORTC, u8PinIdCopy); break;
    1d64:	a5 e3       	ldi	r26, 0x35	; 53
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e5 e3       	ldi	r30, 0x35	; 53
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	48 2f       	mov	r20, r24
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	02 2e       	mov	r0, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <DIO_SetPinValue+0x1ca>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	0a 94       	dec	r0
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <DIO_SetPinValue+0x1c6>
    1d86:	80 95       	com	r24
    1d88:	84 23       	and	r24, r20
    1d8a:	8c 93       	st	X, r24
    1d8c:	14 c0       	rjmp	.+40     	; 0x1db6 <DIO_SetPinValue+0x1fe>
				case DIO_PORTD: Clear_Bit(PORTD, u8PinIdCopy); break;
    1d8e:	a2 e3       	ldi	r26, 0x32	; 50
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e2 e3       	ldi	r30, 0x32	; 50
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 2e       	mov	r0, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <DIO_SetPinValue+0x1f4>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	0a 94       	dec	r0
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <DIO_SetPinValue+0x1f0>
    1db0:	80 95       	com	r24
    1db2:	84 23       	and	r24, r20
    1db4:	8c 93       	st	X, r24
				}
			}

		}
}
    1db6:	27 96       	adiw	r28, 0x07	; 7
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <DIO_GetPinValue>:
//get pin value
u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <DIO_GetPinValue+0x6>
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <DIO_GetPinValue+0x8>
    1dd0:	0f 92       	push	r0
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	8a 83       	std	Y+2, r24	; 0x02
    1dd8:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8ResultLocal;
	if((u8PortIdCopy <= DIO_PORTD) && (u8PinIdCopy <= DIO_PIN7))
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	84 30       	cpi	r24, 0x04	; 4
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <DIO_GetPinValue+0x1a>
    1de0:	6b c0       	rjmp	.+214    	; 0x1eb8 <DIO_GetPinValue+0xf0>
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	88 30       	cpi	r24, 0x08	; 8
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <DIO_GetPinValue+0x22>
    1de8:	67 c0       	rjmp	.+206    	; 0x1eb8 <DIO_GetPinValue+0xf0>
	{
		switch(u8PortIdCopy)
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	3d 83       	std	Y+5, r19	; 0x05
    1df2:	2c 83       	std	Y+4, r18	; 0x04
    1df4:	4c 81       	ldd	r20, Y+4	; 0x04
    1df6:	5d 81       	ldd	r21, Y+5	; 0x05
    1df8:	41 30       	cpi	r20, 0x01	; 1
    1dfa:	51 05       	cpc	r21, r1
    1dfc:	41 f1       	breq	.+80     	; 0x1e4e <DIO_GetPinValue+0x86>
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	82 30       	cpi	r24, 0x02	; 2
    1e04:	91 05       	cpc	r25, r1
    1e06:	34 f4       	brge	.+12     	; 0x1e14 <DIO_GetPinValue+0x4c>
    1e08:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e0c:	21 15       	cp	r18, r1
    1e0e:	31 05       	cpc	r19, r1
    1e10:	61 f0       	breq	.+24     	; 0x1e2a <DIO_GetPinValue+0x62>
    1e12:	52 c0       	rjmp	.+164    	; 0x1eb8 <DIO_GetPinValue+0xf0>
    1e14:	4c 81       	ldd	r20, Y+4	; 0x04
    1e16:	5d 81       	ldd	r21, Y+5	; 0x05
    1e18:	42 30       	cpi	r20, 0x02	; 2
    1e1a:	51 05       	cpc	r21, r1
    1e1c:	51 f1       	breq	.+84     	; 0x1e72 <DIO_GetPinValue+0xaa>
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	9d 81       	ldd	r25, Y+5	; 0x05
    1e22:	83 30       	cpi	r24, 0x03	; 3
    1e24:	91 05       	cpc	r25, r1
    1e26:	b9 f1       	breq	.+110    	; 0x1e96 <DIO_GetPinValue+0xce>
    1e28:	47 c0       	rjmp	.+142    	; 0x1eb8 <DIO_GetPinValue+0xf0>
		{
		case DIO_PORTA: u8ResultLocal = Read_Bit(PINA, u8PinIdCopy); break;
    1e2a:	e9 e3       	ldi	r30, 0x39	; 57
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a9 01       	movw	r20, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <DIO_GetPinValue+0x7a>
    1e3e:	55 95       	asr	r21
    1e40:	47 95       	ror	r20
    1e42:	8a 95       	dec	r24
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <DIO_GetPinValue+0x76>
    1e46:	ca 01       	movw	r24, r20
    1e48:	81 70       	andi	r24, 0x01	; 1
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	35 c0       	rjmp	.+106    	; 0x1eb8 <DIO_GetPinValue+0xf0>
		case DIO_PORTB: u8ResultLocal = Read_Bit(PINB, u8PinIdCopy); break;
    1e4e:	e6 e3       	ldi	r30, 0x36	; 54
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a9 01       	movw	r20, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <DIO_GetPinValue+0x9e>
    1e62:	55 95       	asr	r21
    1e64:	47 95       	ror	r20
    1e66:	8a 95       	dec	r24
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <DIO_GetPinValue+0x9a>
    1e6a:	ca 01       	movw	r24, r20
    1e6c:	81 70       	andi	r24, 0x01	; 1
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	23 c0       	rjmp	.+70     	; 0x1eb8 <DIO_GetPinValue+0xf0>
		case DIO_PORTC: u8ResultLocal = Read_Bit(PINC, u8PinIdCopy); break;
    1e72:	e3 e3       	ldi	r30, 0x33	; 51
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	a9 01       	movw	r20, r18
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <DIO_GetPinValue+0xc2>
    1e86:	55 95       	asr	r21
    1e88:	47 95       	ror	r20
    1e8a:	8a 95       	dec	r24
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <DIO_GetPinValue+0xbe>
    1e8e:	ca 01       	movw	r24, r20
    1e90:	81 70       	andi	r24, 0x01	; 1
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	11 c0       	rjmp	.+34     	; 0x1eb8 <DIO_GetPinValue+0xf0>
		case DIO_PORTD: u8ResultLocal = Read_Bit(PIND, u8PinIdCopy); break;
    1e96:	e0 e3       	ldi	r30, 0x30	; 48
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a9 01       	movw	r20, r18
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <DIO_GetPinValue+0xe6>
    1eaa:	55 95       	asr	r21
    1eac:	47 95       	ror	r20
    1eae:	8a 95       	dec	r24
    1eb0:	e2 f7       	brpl	.-8      	; 0x1eaa <DIO_GetPinValue+0xe2>
    1eb2:	ca 01       	movw	r24, r20
    1eb4:	81 70       	andi	r24, 0x01	; 1
    1eb6:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return u8ResultLocal;
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <Welcome_User>:
#include"KEYPAD/keypad.h"
#include "LCD/LCD.h"
#include<avr/io.h>
#include<util/delay.h>
void Welcome_User(void) //to show user a welcome screen when opens the program
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
	LCD_CLEAR_ALL_SCREEN();
    1ed2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
	LCD_GOTO_XY(0,0);
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
	SEND_A_STRING("Welcome...");
    1ede:	8d ea       	ldi	r24, 0xAD	; 173
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
	LCD_GOTO_XY(1,0);
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
	SEND_A_STRING(" Enter password");
    1eee:	88 eb       	ldi	r24, 0xB8	; 184
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
	LCD_CLEAR_ALL_SCREEN();
    1ef6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
}
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <Get_Number>:

u8 Get_Number(u8 num) //to convert characters to integer numbers
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <Get_Number+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <Get_Number+0x8>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3c 83       	std	Y+4, r19	; 0x04
    1f16:	2b 83       	std	Y+3, r18	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	84 33       	cpi	r24, 0x34	; 52
    1f1e:	91 05       	cpc	r25, r1
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <Get_Number+0x24>
    1f22:	4b c0       	rjmp	.+150    	; 0x1fba <Get_Number+0xba>
    1f24:	2b 81       	ldd	r18, Y+3	; 0x03
    1f26:	3c 81       	ldd	r19, Y+4	; 0x04
    1f28:	25 33       	cpi	r18, 0x35	; 53
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	dc f4       	brge	.+54     	; 0x1f64 <Get_Number+0x64>
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	81 33       	cpi	r24, 0x31	; 49
    1f34:	91 05       	cpc	r25, r1
    1f36:	c1 f1       	breq	.+112    	; 0x1fa8 <Get_Number+0xa8>
    1f38:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3c:	22 33       	cpi	r18, 0x32	; 50
    1f3e:	31 05       	cpc	r19, r1
    1f40:	34 f4       	brge	.+12     	; 0x1f4e <Get_Number+0x4e>
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	80 33       	cpi	r24, 0x30	; 48
    1f48:	91 05       	cpc	r25, r1
    1f4a:	61 f1       	breq	.+88     	; 0x1fa4 <Get_Number+0xa4>
    1f4c:	48 c0       	rjmp	.+144    	; 0x1fde <Get_Number+0xde>
    1f4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f50:	3c 81       	ldd	r19, Y+4	; 0x04
    1f52:	22 33       	cpi	r18, 0x32	; 50
    1f54:	31 05       	cpc	r19, r1
    1f56:	59 f1       	breq	.+86     	; 0x1fae <Get_Number+0xae>
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	83 33       	cpi	r24, 0x33	; 51
    1f5e:	91 05       	cpc	r25, r1
    1f60:	49 f1       	breq	.+82     	; 0x1fb4 <Get_Number+0xb4>
    1f62:	3d c0       	rjmp	.+122    	; 0x1fde <Get_Number+0xde>
    1f64:	2b 81       	ldd	r18, Y+3	; 0x03
    1f66:	3c 81       	ldd	r19, Y+4	; 0x04
    1f68:	27 33       	cpi	r18, 0x37	; 55
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	79 f1       	breq	.+94     	; 0x1fcc <Get_Number+0xcc>
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	88 33       	cpi	r24, 0x38	; 56
    1f74:	91 05       	cpc	r25, r1
    1f76:	5c f4       	brge	.+22     	; 0x1f8e <Get_Number+0x8e>
    1f78:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7c:	25 33       	cpi	r18, 0x35	; 53
    1f7e:	31 05       	cpc	r19, r1
    1f80:	f9 f0       	breq	.+62     	; 0x1fc0 <Get_Number+0xc0>
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	86 33       	cpi	r24, 0x36	; 54
    1f88:	91 05       	cpc	r25, r1
    1f8a:	e9 f0       	breq	.+58     	; 0x1fc6 <Get_Number+0xc6>
    1f8c:	28 c0       	rjmp	.+80     	; 0x1fde <Get_Number+0xde>
    1f8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f90:	3c 81       	ldd	r19, Y+4	; 0x04
    1f92:	28 33       	cpi	r18, 0x38	; 56
    1f94:	31 05       	cpc	r19, r1
    1f96:	e9 f0       	breq	.+58     	; 0x1fd2 <Get_Number+0xd2>
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	89 33       	cpi	r24, 0x39	; 57
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	d9 f0       	breq	.+54     	; 0x1fd8 <Get_Number+0xd8>
    1fa2:	1d c0       	rjmp	.+58     	; 0x1fde <Get_Number+0xde>
	{
	case '0': return 0; break;
    1fa4:	1a 82       	std	Y+2, r1	; 0x02
    1fa6:	1c c0       	rjmp	.+56     	; 0x1fe0 <Get_Number+0xe0>
	case '1': return 1; break;
    1fa8:	91 e0       	ldi	r25, 0x01	; 1
    1faa:	9a 83       	std	Y+2, r25	; 0x02
    1fac:	19 c0       	rjmp	.+50     	; 0x1fe0 <Get_Number+0xe0>
	case '2': return 2; break;
    1fae:	22 e0       	ldi	r18, 0x02	; 2
    1fb0:	2a 83       	std	Y+2, r18	; 0x02
    1fb2:	16 c0       	rjmp	.+44     	; 0x1fe0 <Get_Number+0xe0>
	case '3': return 3; break;
    1fb4:	33 e0       	ldi	r19, 0x03	; 3
    1fb6:	3a 83       	std	Y+2, r19	; 0x02
    1fb8:	13 c0       	rjmp	.+38     	; 0x1fe0 <Get_Number+0xe0>
	case '4': return 4; break;
    1fba:	84 e0       	ldi	r24, 0x04	; 4
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
    1fbe:	10 c0       	rjmp	.+32     	; 0x1fe0 <Get_Number+0xe0>
	case '5': return 5; break;
    1fc0:	95 e0       	ldi	r25, 0x05	; 5
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	0d c0       	rjmp	.+26     	; 0x1fe0 <Get_Number+0xe0>
	case '6': return 6; break;
    1fc6:	26 e0       	ldi	r18, 0x06	; 6
    1fc8:	2a 83       	std	Y+2, r18	; 0x02
    1fca:	0a c0       	rjmp	.+20     	; 0x1fe0 <Get_Number+0xe0>
	case '7': return 7; break;
    1fcc:	37 e0       	ldi	r19, 0x07	; 7
    1fce:	3a 83       	std	Y+2, r19	; 0x02
    1fd0:	07 c0       	rjmp	.+14     	; 0x1fe0 <Get_Number+0xe0>
	case '8': return 8; break;
    1fd2:	88 e0       	ldi	r24, 0x08	; 8
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
    1fd6:	04 c0       	rjmp	.+8      	; 0x1fe0 <Get_Number+0xe0>
	case '9': return 9; break;
    1fd8:	99 e0       	ldi	r25, 0x09	; 9
    1fda:	9a 83       	std	Y+2, r25	; 0x02
    1fdc:	01 c0       	rjmp	.+2      	; 0x1fe0 <Get_Number+0xe0>
	default: break;
	}
	return 0;
    1fde:	1a 82       	std	Y+2, r1	; 0x02
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <Choose_Operation>:


void Choose_Operation(void) //all operation (like show balance) are done here
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	e6 97       	sbiw	r28, 0x36	; 54
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
	u8 keyy_pressed, num_pressed;
	u32 money = 0;
    2004:	1b a6       	std	Y+43, r1	; 0x2b
    2006:	1c a6       	std	Y+44, r1	; 0x2c
    2008:	1d a6       	std	Y+45, r1	; 0x2d
    200a:	1e a6       	std	Y+46, r1	; 0x2e
	LCD_CLEAR_ALL_SCREEN();
    200c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
	back: SEND_A_STRING("1-Show balance  2-insert money  3-withdraw"); //allowed features
    2010:	88 ec       	ldi	r24, 0xC8	; 200
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
	LCD_CLEAR_ALL_SCREEN();
    2018:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
	stay:keyy_pressed = KPD_GETKEY();
    201c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <KPD_GETKEY>
    2020:	88 ab       	std	Y+48, r24	; 0x30
	switch(keyy_pressed)
    2022:	88 a9       	ldd	r24, Y+48	; 0x30
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	3e ab       	std	Y+54, r19	; 0x36
    202a:	2d ab       	std	Y+53, r18	; 0x35
    202c:	8d a9       	ldd	r24, Y+53	; 0x35
    202e:	9e a9       	ldd	r25, Y+54	; 0x36
    2030:	82 33       	cpi	r24, 0x32	; 50
    2032:	91 05       	cpc	r25, r1
    2034:	09 f4       	brne	.+2      	; 0x2038 <Choose_Operation+0x48>
    2036:	90 c0       	rjmp	.+288    	; 0x2158 <Choose_Operation+0x168>
    2038:	2d a9       	ldd	r18, Y+53	; 0x35
    203a:	3e a9       	ldd	r19, Y+54	; 0x36
    203c:	23 33       	cpi	r18, 0x33	; 51
    203e:	31 05       	cpc	r19, r1
    2040:	34 f4       	brge	.+12     	; 0x204e <Choose_Operation+0x5e>
    2042:	8d a9       	ldd	r24, Y+53	; 0x35
    2044:	9e a9       	ldd	r25, Y+54	; 0x36
    2046:	81 33       	cpi	r24, 0x31	; 49
    2048:	91 05       	cpc	r25, r1
    204a:	69 f0       	breq	.+26     	; 0x2066 <Choose_Operation+0x76>
    204c:	21 c2       	rjmp	.+1090   	; 0x2490 <Choose_Operation+0x4a0>
    204e:	2d a9       	ldd	r18, Y+53	; 0x35
    2050:	3e a9       	ldd	r19, Y+54	; 0x36
    2052:	23 33       	cpi	r18, 0x33	; 51
    2054:	31 05       	cpc	r19, r1
    2056:	09 f4       	brne	.+2      	; 0x205a <Choose_Operation+0x6a>
    2058:	4d c1       	rjmp	.+666    	; 0x22f4 <Choose_Operation+0x304>
    205a:	8d a9       	ldd	r24, Y+53	; 0x35
    205c:	9e a9       	ldd	r25, Y+54	; 0x36
    205e:	8f 3f       	cpi	r24, 0xFF	; 255
    2060:	91 05       	cpc	r25, r1
    2062:	e1 f2       	breq	.-72     	; 0x201c <Choose_Operation+0x2c>
    2064:	15 c2       	rjmp	.+1066   	; 0x2490 <Choose_Operation+0x4a0>
	{
	case KPD_NOT_PRESSED:
		goto stay;
	case '1': //show balance case
		LCD_CLEAR_ALL_SCREEN();
    2066:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
		Show_Balance();
    206a:	0e 94 72 06 	call	0xce4	; 0xce4 <Show_Balance>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e8       	ldi	r25, 0x80	; 128
    2072:	ab e3       	ldi	r26, 0x3B	; 59
    2074:	b5 e4       	ldi	r27, 0x45	; 69
    2076:	8f a3       	std	Y+39, r24	; 0x27
    2078:	98 a7       	std	Y+40, r25	; 0x28
    207a:	a9 a7       	std	Y+41, r26	; 0x29
    207c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207e:	6f a1       	ldd	r22, Y+39	; 0x27
    2080:	78 a5       	ldd	r23, Y+40	; 0x28
    2082:	89 a5       	ldd	r24, Y+41	; 0x29
    2084:	9a a5       	ldd	r25, Y+42	; 0x2a
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a ef       	ldi	r20, 0xFA	; 250
    208c:	54 e4       	ldi	r21, 0x44	; 68
    208e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8b a3       	std	Y+35, r24	; 0x23
    2098:	9c a3       	std	Y+36, r25	; 0x24
    209a:	ad a3       	std	Y+37, r26	; 0x25
    209c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209e:	6b a1       	ldd	r22, Y+35	; 0x23
    20a0:	7c a1       	ldd	r23, Y+36	; 0x24
    20a2:	8d a1       	ldd	r24, Y+37	; 0x25
    20a4:	9e a1       	ldd	r25, Y+38	; 0x26
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <Choose_Operation+0xd0>
		__ticks = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9a a3       	std	Y+34, r25	; 0x22
    20bc:	89 a3       	std	Y+33, r24	; 0x21
    20be:	3f c0       	rjmp	.+126    	; 0x213e <Choose_Operation+0x14e>
	else if (__tmp > 65535)
    20c0:	6b a1       	ldd	r22, Y+35	; 0x23
    20c2:	7c a1       	ldd	r23, Y+36	; 0x24
    20c4:	8d a1       	ldd	r24, Y+37	; 0x25
    20c6:	9e a1       	ldd	r25, Y+38	; 0x26
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	4c f5       	brge	.+82     	; 0x212a <Choose_Operation+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	6f a1       	ldd	r22, Y+39	; 0x27
    20da:	78 a5       	ldd	r23, Y+40	; 0x28
    20dc:	89 a5       	ldd	r24, Y+41	; 0x29
    20de:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <Choose_Operation+0x130>
    2102:	88 ec       	ldi	r24, 0xC8	; 200
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	98 a3       	std	Y+32, r25	; 0x20
    2108:	8f 8f       	std	Y+31, r24	; 0x1f
    210a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    210c:	98 a1       	ldd	r25, Y+32	; 0x20
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <Choose_Operation+0x11e>
    2112:	98 a3       	std	Y+32, r25	; 0x20
    2114:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	89 a1       	ldd	r24, Y+33	; 0x21
    2118:	9a a1       	ldd	r25, Y+34	; 0x22
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	9a a3       	std	Y+34, r25	; 0x22
    211e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	69 f7       	brne	.-38     	; 0x2102 <Choose_Operation+0x112>
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <Choose_Operation+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	6b a1       	ldd	r22, Y+35	; 0x23
    212c:	7c a1       	ldd	r23, Y+36	; 0x24
    212e:	8d a1       	ldd	r24, Y+37	; 0x25
    2130:	9e a1       	ldd	r25, Y+38	; 0x26
    2132:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9a a3       	std	Y+34, r25	; 0x22
    213c:	89 a3       	std	Y+33, r24	; 0x21
    213e:	89 a1       	ldd	r24, Y+33	; 0x21
    2140:	9a a1       	ldd	r25, Y+34	; 0x22
    2142:	9e 8f       	std	Y+30, r25	; 0x1e
    2144:	8d 8f       	std	Y+29, r24	; 0x1d
    2146:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2148:	9e 8d       	ldd	r25, Y+30	; 0x1e
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <Choose_Operation+0x15a>
    214e:	9e 8f       	std	Y+30, r25	; 0x1e
    2150:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(3000);
		LCD_CLEAR_ALL_SCREEN();
    2152:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
    2156:	5c cf       	rjmp	.-328    	; 0x2010 <Choose_Operation+0x20>
		goto back;
	case '2': //Insert money case
		LCD_CLEAR_ALL_SCREEN();
    2158:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
		SEND_A_STRING("Enter money: ");
    215c:	83 ef       	ldi	r24, 0xF3	; 243
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
		LCD_GOTO_XY(1,0);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
		stay2: keyy_pressed = KPD_GETKEY();
    216c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <KPD_GETKEY>
    2170:	88 ab       	std	Y+48, r24	; 0x30
		switch(keyy_pressed) //switch case to get inserted money
    2172:	88 a9       	ldd	r24, Y+48	; 0x30
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	3c ab       	std	Y+52, r19	; 0x34
    217a:	2b ab       	std	Y+51, r18	; 0x33
    217c:	8b a9       	ldd	r24, Y+51	; 0x33
    217e:	9c a9       	ldd	r25, Y+52	; 0x34
    2180:	83 34       	cpi	r24, 0x43	; 67
    2182:	91 05       	cpc	r25, r1
    2184:	09 f4       	brne	.+2      	; 0x2188 <Choose_Operation+0x198>
    2186:	84 c1       	rjmp	.+776    	; 0x2490 <Choose_Operation+0x4a0>
    2188:	2b a9       	ldd	r18, Y+51	; 0x33
    218a:	3c a9       	ldd	r19, Y+52	; 0x34
    218c:	2f 3f       	cpi	r18, 0xFF	; 255
    218e:	31 05       	cpc	r19, r1
    2190:	69 f3       	breq	.-38     	; 0x216c <Choose_Operation+0x17c>
    2192:	8b a9       	ldd	r24, Y+51	; 0x33
    2194:	9c a9       	ldd	r25, Y+52	; 0x34
    2196:	8d 33       	cpi	r24, 0x3D	; 61
    2198:	91 05       	cpc	r25, r1
    219a:	09 f0       	breq	.+2      	; 0x219e <Choose_Operation+0x1ae>
    219c:	88 c0       	rjmp	.+272    	; 0x22ae <Choose_Operation+0x2be>
		case KPD_NOT_PRESSED: //no key pressed
			goto stay2;
		case 'C': //clear screen
			break;
		case '=': //insert money function is done here
			LCD_CLEAR_ALL_SCREEN();
    219e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
			Inset_Money(money);
    21a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21a6:	ad a5       	ldd	r26, Y+45	; 0x2d
    21a8:	be a5       	ldd	r27, Y+46	; 0x2e
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 8b 06 	call	0xd16	; 0xd16 <Inset_Money>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e8       	ldi	r25, 0x80	; 128
    21b6:	ab e3       	ldi	r26, 0x3B	; 59
    21b8:	b5 e4       	ldi	r27, 0x45	; 69
    21ba:	89 8f       	std	Y+25, r24	; 0x19
    21bc:	9a 8f       	std	Y+26, r25	; 0x1a
    21be:	ab 8f       	std	Y+27, r26	; 0x1b
    21c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	69 8d       	ldd	r22, Y+25	; 0x19
    21c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a ef       	ldi	r20, 0xFA	; 250
    21d0:	54 e4       	ldi	r21, 0x44	; 68
    21d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	8d 8b       	std	Y+21, r24	; 0x15
    21dc:	9e 8b       	std	Y+22, r25	; 0x16
    21de:	af 8b       	std	Y+23, r26	; 0x17
    21e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21e2:	6d 89       	ldd	r22, Y+21	; 0x15
    21e4:	7e 89       	ldd	r23, Y+22	; 0x16
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	2c f4       	brge	.+10     	; 0x2204 <Choose_Operation+0x214>
		__ticks = 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9c 8b       	std	Y+20, r25	; 0x14
    2200:	8b 8b       	std	Y+19, r24	; 0x13
    2202:	3f c0       	rjmp	.+126    	; 0x2282 <Choose_Operation+0x292>
	else if (__tmp > 65535)
    2204:	6d 89       	ldd	r22, Y+21	; 0x15
    2206:	7e 89       	ldd	r23, Y+22	; 0x16
    2208:	8f 89       	ldd	r24, Y+23	; 0x17
    220a:	98 8d       	ldd	r25, Y+24	; 0x18
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	4c f5       	brge	.+82     	; 0x226e <Choose_Operation+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	69 8d       	ldd	r22, Y+25	; 0x19
    221e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2222:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9c 8b       	std	Y+20, r25	; 0x14
    2242:	8b 8b       	std	Y+19, r24	; 0x13
    2244:	0f c0       	rjmp	.+30     	; 0x2264 <Choose_Operation+0x274>
    2246:	88 ec       	ldi	r24, 0xC8	; 200
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9a 8b       	std	Y+18, r25	; 0x12
    224c:	89 8b       	std	Y+17, r24	; 0x11
    224e:	89 89       	ldd	r24, Y+17	; 0x11
    2250:	9a 89       	ldd	r25, Y+18	; 0x12
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <Choose_Operation+0x262>
    2256:	9a 8b       	std	Y+18, r25	; 0x12
    2258:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	8b 89       	ldd	r24, Y+19	; 0x13
    225c:	9c 89       	ldd	r25, Y+20	; 0x14
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	9c 8b       	std	Y+20, r25	; 0x14
    2262:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2264:	8b 89       	ldd	r24, Y+19	; 0x13
    2266:	9c 89       	ldd	r25, Y+20	; 0x14
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	69 f7       	brne	.-38     	; 0x2246 <Choose_Operation+0x256>
    226c:	14 c0       	rjmp	.+40     	; 0x2296 <Choose_Operation+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	6d 89       	ldd	r22, Y+21	; 0x15
    2270:	7e 89       	ldd	r23, Y+22	; 0x16
    2272:	8f 89       	ldd	r24, Y+23	; 0x17
    2274:	98 8d       	ldd	r25, Y+24	; 0x18
    2276:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9c 8b       	std	Y+20, r25	; 0x14
    2280:	8b 8b       	std	Y+19, r24	; 0x13
    2282:	8b 89       	ldd	r24, Y+19	; 0x13
    2284:	9c 89       	ldd	r25, Y+20	; 0x14
    2286:	98 8b       	std	Y+16, r25	; 0x10
    2288:	8f 87       	std	Y+15, r24	; 0x0f
    228a:	8f 85       	ldd	r24, Y+15	; 0x0f
    228c:	98 89       	ldd	r25, Y+16	; 0x10
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <Choose_Operation+0x29e>
    2292:	98 8b       	std	Y+16, r25	; 0x10
    2294:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3000);
			LCD_CLEAR_ALL_SCREEN();
    2296:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
			LCD_GOTO_XY(0,0);
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
			num_pressed= 0;
    22a2:	1f a6       	std	Y+47, r1	; 0x2f
			money = 0;
    22a4:	1b a6       	std	Y+43, r1	; 0x2b
    22a6:	1c a6       	std	Y+44, r1	; 0x2c
    22a8:	1d a6       	std	Y+45, r1	; 0x2d
    22aa:	1e a6       	std	Y+46, r1	; 0x2e
    22ac:	b1 ce       	rjmp	.-670    	; 0x2010 <Choose_Operation+0x20>
			goto back;
		default: //store entered numbers as money to be inserted
			SEND_A_CHAR(keyy_pressed);
    22ae:	88 a9       	ldd	r24, Y+48	; 0x30
    22b0:	0e 94 40 09 	call	0x1280	; 0x1280 <SEND_A_CHAR>
			num_pressed = Get_Number(keyy_pressed);
    22b4:	88 a9       	ldd	r24, Y+48	; 0x30
    22b6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Get_Number>
    22ba:	8f a7       	std	Y+47, r24	; 0x2f
			money = money*10 + num_pressed;
    22bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    22be:	9c a5       	ldd	r25, Y+44	; 0x2c
    22c0:	ad a5       	ldd	r26, Y+45	; 0x2d
    22c2:	be a5       	ldd	r27, Y+46	; 0x2e
    22c4:	2a e0       	ldi	r18, 0x0A	; 10
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	0e 94 45 13 	call	0x268a	; 0x268a <__mulsi3>
    22d4:	9b 01       	movw	r18, r22
    22d6:	ac 01       	movw	r20, r24
    22d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22da:	88 2f       	mov	r24, r24
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e0       	ldi	r26, 0x00	; 0
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	82 0f       	add	r24, r18
    22e4:	93 1f       	adc	r25, r19
    22e6:	a4 1f       	adc	r26, r20
    22e8:	b5 1f       	adc	r27, r21
    22ea:	8b a7       	std	Y+43, r24	; 0x2b
    22ec:	9c a7       	std	Y+44, r25	; 0x2c
    22ee:	ad a7       	std	Y+45, r26	; 0x2d
    22f0:	be a7       	std	Y+46, r27	; 0x2e
    22f2:	3c cf       	rjmp	.-392    	; 0x216c <Choose_Operation+0x17c>
			goto stay2;
		}

		break;
	case '3': //withdraw money case
		LCD_CLEAR_ALL_SCREEN();
    22f4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
		SEND_A_STRING("Enter amount: ");
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	91 e0       	ldi	r25, 0x01	; 1
    22fc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
		LCD_GOTO_XY(1,0);
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
		stay3: keyy_pressed = KPD_GETKEY();
    2308:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <KPD_GETKEY>
    230c:	88 ab       	std	Y+48, r24	; 0x30
		switch(keyy_pressed)
    230e:	88 a9       	ldd	r24, Y+48	; 0x30
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	3a ab       	std	Y+50, r19	; 0x32
    2316:	29 ab       	std	Y+49, r18	; 0x31
    2318:	89 a9       	ldd	r24, Y+49	; 0x31
    231a:	9a a9       	ldd	r25, Y+50	; 0x32
    231c:	83 34       	cpi	r24, 0x43	; 67
    231e:	91 05       	cpc	r25, r1
    2320:	09 f4       	brne	.+2      	; 0x2324 <Choose_Operation+0x334>
    2322:	b6 c0       	rjmp	.+364    	; 0x2490 <Choose_Operation+0x4a0>
    2324:	29 a9       	ldd	r18, Y+49	; 0x31
    2326:	3a a9       	ldd	r19, Y+50	; 0x32
    2328:	2f 3f       	cpi	r18, 0xFF	; 255
    232a:	31 05       	cpc	r19, r1
    232c:	69 f3       	breq	.-38     	; 0x2308 <Choose_Operation+0x318>
    232e:	89 a9       	ldd	r24, Y+49	; 0x31
    2330:	9a a9       	ldd	r25, Y+50	; 0x32
    2332:	8d 33       	cpi	r24, 0x3D	; 61
    2334:	91 05       	cpc	r25, r1
    2336:	09 f0       	breq	.+2      	; 0x233a <Choose_Operation+0x34a>
    2338:	88 c0       	rjmp	.+272    	; 0x244a <Choose_Operation+0x45a>
		case KPD_NOT_PRESSED: //no key pressed
			goto stay3;
		case 'C': //clear screen
			break;
		case '=':
			LCD_CLEAR_ALL_SCREEN();
    233a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
			Withdraw(money);
    233e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2340:	9c a5       	ldd	r25, Y+44	; 0x2c
    2342:	ad a5       	ldd	r26, Y+45	; 0x2d
    2344:	be a5       	ldd	r27, Y+46	; 0x2e
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	0e 94 cb 06 	call	0xd96	; 0xd96 <Withdraw>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e8       	ldi	r25, 0x80	; 128
    2352:	ab e3       	ldi	r26, 0x3B	; 59
    2354:	b5 e4       	ldi	r27, 0x45	; 69
    2356:	8b 87       	std	Y+11, r24	; 0x0b
    2358:	9c 87       	std	Y+12, r25	; 0x0c
    235a:	ad 87       	std	Y+13, r26	; 0x0d
    235c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2360:	7c 85       	ldd	r23, Y+12	; 0x0c
    2362:	8d 85       	ldd	r24, Y+13	; 0x0d
    2364:	9e 85       	ldd	r25, Y+14	; 0x0e
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a ef       	ldi	r20, 0xFA	; 250
    236c:	54 e4       	ldi	r21, 0x44	; 68
    236e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8f 83       	std	Y+7, r24	; 0x07
    2378:	98 87       	std	Y+8, r25	; 0x08
    237a:	a9 87       	std	Y+9, r26	; 0x09
    237c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <Choose_Operation+0x3b0>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	3f c0       	rjmp	.+126    	; 0x241e <Choose_Operation+0x42e>
	else if (__tmp > 65535)
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <Choose_Operation+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    23bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23be:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <Choose_Operation+0x410>
    23e2:	88 ec       	ldi	r24, 0xC8	; 200
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <Choose_Operation+0x3fe>
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <Choose_Operation+0x3f2>
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <Choose_Operation+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <Choose_Operation+0x43a>
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);
			LCD_CLEAR_ALL_SCREEN();
    2432:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
			LCD_GOTO_XY(0,0);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	0e 94 06 09 	call	0x120c	; 0x120c <LCD_GOTO_XY>
			num_pressed= 0;
    243e:	1f a6       	std	Y+47, r1	; 0x2f
			money = 0;
    2440:	1b a6       	std	Y+43, r1	; 0x2b
    2442:	1c a6       	std	Y+44, r1	; 0x2c
    2444:	1d a6       	std	Y+45, r1	; 0x2d
    2446:	1e a6       	std	Y+46, r1	; 0x2e
    2448:	e3 cd       	rjmp	.-1082   	; 0x2010 <Choose_Operation+0x20>
			goto back;
		default:
			SEND_A_CHAR(keyy_pressed);
    244a:	88 a9       	ldd	r24, Y+48	; 0x30
    244c:	0e 94 40 09 	call	0x1280	; 0x1280 <SEND_A_CHAR>
			num_pressed = Get_Number(keyy_pressed);
    2450:	88 a9       	ldd	r24, Y+48	; 0x30
    2452:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Get_Number>
    2456:	8f a7       	std	Y+47, r24	; 0x2f
			money = money*10 + num_pressed;
    2458:	8b a5       	ldd	r24, Y+43	; 0x2b
    245a:	9c a5       	ldd	r25, Y+44	; 0x2c
    245c:	ad a5       	ldd	r26, Y+45	; 0x2d
    245e:	be a5       	ldd	r27, Y+46	; 0x2e
    2460:	2a e0       	ldi	r18, 0x0A	; 10
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 45 13 	call	0x268a	; 0x268a <__mulsi3>
    2470:	9b 01       	movw	r18, r22
    2472:	ac 01       	movw	r20, r24
    2474:	8f a5       	ldd	r24, Y+47	; 0x2f
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	a0 e0       	ldi	r26, 0x00	; 0
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	82 0f       	add	r24, r18
    2480:	93 1f       	adc	r25, r19
    2482:	a4 1f       	adc	r26, r20
    2484:	b5 1f       	adc	r27, r21
    2486:	8b a7       	std	Y+43, r24	; 0x2b
    2488:	9c a7       	std	Y+44, r25	; 0x2c
    248a:	ad a7       	std	Y+45, r26	; 0x2d
    248c:	be a7       	std	Y+46, r27	; 0x2e
    248e:	3c cf       	rjmp	.-392    	; 0x2308 <Choose_Operation+0x318>
		}
		break;
	default:
		break;
	}
}
    2490:	e6 96       	adiw	r28, 0x36	; 54
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <main>:


int main(void)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	65 97       	sbiw	r28, 0x15	; 21
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
	KPD_INIT();
    24b6:	0e 94 8f 0a 	call	0x151e	; 0x151e <KPD_INIT>
	LCD_INIT();
    24ba:	0e 94 e5 07 	call	0xfca	; 0xfca <LCD_INIT>
	LCD_CLEAR_ALL_SCREEN();
    24be:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>

	Welcome_User();
    24c2:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Welcome_User>

	u8 key_pressed, num_pressed=0, password=0, count = 1;
    24c6:	1a 8a       	std	Y+18, r1	; 0x12
    24c8:	19 8a       	std	Y+17, r1	; 0x11
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	88 8b       	std	Y+16, r24	; 0x10
	 state Check_password_result;


	while(1)
	{
		key_pressed = KPD_GETKEY();
    24ce:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <KPD_GETKEY>
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
		switch(key_pressed)
    24d4:	8b 89       	ldd	r24, Y+19	; 0x13
    24d6:	28 2f       	mov	r18, r24
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	3d 8b       	std	Y+21, r19	; 0x15
    24dc:	2c 8b       	std	Y+20, r18	; 0x14
    24de:	8c 89       	ldd	r24, Y+20	; 0x14
    24e0:	9d 89       	ldd	r25, Y+21	; 0x15
    24e2:	83 34       	cpi	r24, 0x43	; 67
    24e4:	91 05       	cpc	r25, r1
    24e6:	59 f0       	breq	.+22     	; 0x24fe <main+0x5c>
    24e8:	2c 89       	ldd	r18, Y+20	; 0x14
    24ea:	3d 89       	ldd	r19, Y+21	; 0x15
    24ec:	2f 3f       	cpi	r18, 0xFF	; 255
    24ee:	31 05       	cpc	r19, r1
    24f0:	71 f3       	breq	.-36     	; 0x24ce <main+0x2c>
    24f2:	8c 89       	ldd	r24, Y+20	; 0x14
    24f4:	9d 89       	ldd	r25, Y+21	; 0x15
    24f6:	8d 33       	cpi	r24, 0x3D	; 61
    24f8:	91 05       	cpc	r25, r1
    24fa:	49 f0       	breq	.+18     	; 0x250e <main+0x6c>
    24fc:	ad c0       	rjmp	.+346    	; 0x2658 <main+0x1b6>
		{
		case KPD_NOT_PRESSED: //no key pressed
			break;
		case 'C': //clear screen
			LCD_CLEAR_ALL_SCREEN();
    24fe:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
			num_pressed=0;
    2502:	1a 8a       	std	Y+18, r1	; 0x12
			password=0;
    2504:	19 8a       	std	Y+17, r1	; 0x11
			Check_password_result=0;
    2506:	1f 86       	std	Y+15, r1	; 0x0f
			count = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	88 8b       	std	Y+16, r24	; 0x10
    250c:	e0 cf       	rjmp	.-64     	; 0x24ce <main+0x2c>
			break;
		case '=':
			Check_password_result = Check_Password(password);
    250e:	89 89       	ldd	r24, Y+17	; 0x11
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e0       	ldi	r26, 0x00	; 0
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 48 06 	call	0xc90	; 0xc90 <Check_Password>
    2520:	8f 87       	std	Y+15, r24	; 0x0f
			if(Check_password_result == Correct_password) // if password was correct
    2522:	8f 85       	ldd	r24, Y+15	; 0x0f
    2524:	8f 3f       	cpi	r24, 0xFF	; 255
    2526:	51 f4       	brne	.+20     	; 0x253c <main+0x9a>
			{
				Choose_Operation();
    2528:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <Choose_Operation>
				num_pressed=0;
    252c:	1a 8a       	std	Y+18, r1	; 0x12
				password=0;
    252e:	19 8a       	std	Y+17, r1	; 0x11
				Check_password_result=0;
    2530:	1f 86       	std	Y+15, r1	; 0x0f
				count = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	88 8b       	std	Y+16, r24	; 0x10
				LCD_CLEAR_ALL_SCREEN();
    2536:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
    253a:	c9 cf       	rjmp	.-110    	; 0x24ce <main+0x2c>
				break;
			}
			else if(Check_password_result == wrong_password) //if password was wrong
    253c:	8f 85       	ldd	r24, Y+15	; 0x0f
    253e:	8e 3f       	cpi	r24, 0xFE	; 254
    2540:	31 f6       	brne	.-116    	; 0x24ce <main+0x2c>
			{
				count++;
    2542:	88 89       	ldd	r24, Y+16	; 0x10
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	88 8b       	std	Y+16, r24	; 0x10
				if(count > input_attempts) // input attempts is more than allowed
    2548:	88 89       	ldd	r24, Y+16	; 0x10
    254a:	84 30       	cpi	r24, 0x04	; 4
    254c:	08 f4       	brcc	.+2      	; 0x2550 <main+0xae>
    254e:	7e c0       	rjmp	.+252    	; 0x264c <main+0x1aa>
				{
					SEND_A_STRING("Many wrong attempts was entered");
    2550:	80 e1       	ldi	r24, 0x10	; 16
    2552:	91 e0       	ldi	r25, 0x01	; 1
    2554:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SEND_A_STRING>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e8       	ldi	r25, 0x80	; 128
    255c:	ab e3       	ldi	r26, 0x3B	; 59
    255e:	b5 e4       	ldi	r27, 0x45	; 69
    2560:	8b 87       	std	Y+11, r24	; 0x0b
    2562:	9c 87       	std	Y+12, r25	; 0x0c
    2564:	ad 87       	std	Y+13, r26	; 0x0d
    2566:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2568:	6b 85       	ldd	r22, Y+11	; 0x0b
    256a:	7c 85       	ldd	r23, Y+12	; 0x0c
    256c:	8d 85       	ldd	r24, Y+13	; 0x0d
    256e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a ef       	ldi	r20, 0xFA	; 250
    2576:	54 e4       	ldi	r21, 0x44	; 68
    2578:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8f 83       	std	Y+7, r24	; 0x07
    2582:	98 87       	std	Y+8, r25	; 0x08
    2584:	a9 87       	std	Y+9, r26	; 0x09
    2586:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2588:	6f 81       	ldd	r22, Y+7	; 0x07
    258a:	78 85       	ldd	r23, Y+8	; 0x08
    258c:	89 85       	ldd	r24, Y+9	; 0x09
    258e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	5f e3       	ldi	r21, 0x3F	; 63
    2598:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    259c:	88 23       	and	r24, r24
    259e:	2c f4       	brge	.+10     	; 0x25aa <main+0x108>
		__ticks = 1;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
    25a8:	3f c0       	rjmp	.+126    	; 0x2628 <main+0x186>
	else if (__tmp > 65535)
    25aa:	6f 81       	ldd	r22, Y+7	; 0x07
    25ac:	78 85       	ldd	r23, Y+8	; 0x08
    25ae:	89 85       	ldd	r24, Y+9	; 0x09
    25b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	4c f5       	brge	.+82     	; 0x2614 <main+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <main+0x168>
    25ec:	88 ec       	ldi	r24, 0xC8	; 200
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9c 83       	std	Y+4, r25	; 0x04
    25f2:	8b 83       	std	Y+3, r24	; 0x03
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <main+0x156>
    25fc:	9c 83       	std	Y+4, r25	; 0x04
    25fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	69 f7       	brne	.-38     	; 0x25ec <main+0x14a>
    2612:	14 c0       	rjmp	.+40     	; 0x263c <main+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	6f 81       	ldd	r22, Y+7	; 0x07
    2616:	78 85       	ldd	r23, Y+8	; 0x08
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	9a 85       	ldd	r25, Y+10	; 0x0a
    261c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <main+0x192>
    2638:	9a 83       	std	Y+2, r25	; 0x02
    263a:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(3000);
					num_pressed=0;
    263c:	1a 8a       	std	Y+18, r1	; 0x12
					password=0;
    263e:	19 8a       	std	Y+17, r1	; 0x11
					Check_password_result=0;
    2640:	1f 86       	std	Y+15, r1	; 0x0f
					count = 1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	88 8b       	std	Y+16, r24	; 0x10
					LCD_CLEAR_ALL_SCREEN();
    2646:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
    264a:	41 cf       	rjmp	.-382    	; 0x24ce <main+0x2c>
					break;
				}
				num_pressed=0;
    264c:	1a 8a       	std	Y+18, r1	; 0x12
				password=0;
    264e:	19 8a       	std	Y+17, r1	; 0x11
				Check_password_result=0;
    2650:	1f 86       	std	Y+15, r1	; 0x0f
				LCD_CLEAR_ALL_SCREEN();
    2652:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LCD_CLEAR_ALL_SCREEN>
    2656:	3b cf       	rjmp	.-394    	; 0x24ce <main+0x2c>
			}
			break;
		default: //store entered numbers as a password
			num_pressed= Get_Number(key_pressed);
    2658:	8b 89       	ldd	r24, Y+19	; 0x13
    265a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <Get_Number>
    265e:	8a 8b       	std	Y+18, r24	; 0x12
			SEND_A_CHAR(key_pressed);
    2660:	8b 89       	ldd	r24, Y+19	; 0x13
    2662:	0e 94 40 09 	call	0x1280	; 0x1280 <SEND_A_CHAR>
			password = password*10 + num_pressed;
    2666:	89 89       	ldd	r24, Y+17	; 0x11
    2668:	88 2f       	mov	r24, r24
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9c 01       	movw	r18, r24
    266e:	22 0f       	add	r18, r18
    2670:	33 1f       	adc	r19, r19
    2672:	c9 01       	movw	r24, r18
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	82 0f       	add	r24, r18
    267e:	93 1f       	adc	r25, r19
    2680:	98 2f       	mov	r25, r24
    2682:	8a 89       	ldd	r24, Y+18	; 0x12
    2684:	89 0f       	add	r24, r25
    2686:	89 8b       	std	Y+17, r24	; 0x11
    2688:	22 cf       	rjmp	.-444    	; 0x24ce <main+0x2c>

0000268a <__mulsi3>:
    268a:	62 9f       	mul	r22, r18
    268c:	d0 01       	movw	r26, r0
    268e:	73 9f       	mul	r23, r19
    2690:	f0 01       	movw	r30, r0
    2692:	82 9f       	mul	r24, r18
    2694:	e0 0d       	add	r30, r0
    2696:	f1 1d       	adc	r31, r1
    2698:	64 9f       	mul	r22, r20
    269a:	e0 0d       	add	r30, r0
    269c:	f1 1d       	adc	r31, r1
    269e:	92 9f       	mul	r25, r18
    26a0:	f0 0d       	add	r31, r0
    26a2:	83 9f       	mul	r24, r19
    26a4:	f0 0d       	add	r31, r0
    26a6:	74 9f       	mul	r23, r20
    26a8:	f0 0d       	add	r31, r0
    26aa:	65 9f       	mul	r22, r21
    26ac:	f0 0d       	add	r31, r0
    26ae:	99 27       	eor	r25, r25
    26b0:	72 9f       	mul	r23, r18
    26b2:	b0 0d       	add	r27, r0
    26b4:	e1 1d       	adc	r30, r1
    26b6:	f9 1f       	adc	r31, r25
    26b8:	63 9f       	mul	r22, r19
    26ba:	b0 0d       	add	r27, r0
    26bc:	e1 1d       	adc	r30, r1
    26be:	f9 1f       	adc	r31, r25
    26c0:	bd 01       	movw	r22, r26
    26c2:	cf 01       	movw	r24, r30
    26c4:	11 24       	eor	r1, r1
    26c6:	08 95       	ret

000026c8 <__prologue_saves__>:
    26c8:	2f 92       	push	r2
    26ca:	3f 92       	push	r3
    26cc:	4f 92       	push	r4
    26ce:	5f 92       	push	r5
    26d0:	6f 92       	push	r6
    26d2:	7f 92       	push	r7
    26d4:	8f 92       	push	r8
    26d6:	9f 92       	push	r9
    26d8:	af 92       	push	r10
    26da:	bf 92       	push	r11
    26dc:	cf 92       	push	r12
    26de:	df 92       	push	r13
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	ca 1b       	sub	r28, r26
    26f2:	db 0b       	sbc	r29, r27
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	09 94       	ijmp

00002700 <__epilogue_restores__>:
    2700:	2a 88       	ldd	r2, Y+18	; 0x12
    2702:	39 88       	ldd	r3, Y+17	; 0x11
    2704:	48 88       	ldd	r4, Y+16	; 0x10
    2706:	5f 84       	ldd	r5, Y+15	; 0x0f
    2708:	6e 84       	ldd	r6, Y+14	; 0x0e
    270a:	7d 84       	ldd	r7, Y+13	; 0x0d
    270c:	8c 84       	ldd	r8, Y+12	; 0x0c
    270e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2710:	aa 84       	ldd	r10, Y+10	; 0x0a
    2712:	b9 84       	ldd	r11, Y+9	; 0x09
    2714:	c8 84       	ldd	r12, Y+8	; 0x08
    2716:	df 80       	ldd	r13, Y+7	; 0x07
    2718:	ee 80       	ldd	r14, Y+6	; 0x06
    271a:	fd 80       	ldd	r15, Y+5	; 0x05
    271c:	0c 81       	ldd	r16, Y+4	; 0x04
    271e:	1b 81       	ldd	r17, Y+3	; 0x03
    2720:	aa 81       	ldd	r26, Y+2	; 0x02
    2722:	b9 81       	ldd	r27, Y+1	; 0x01
    2724:	ce 0f       	add	r28, r30
    2726:	d1 1d       	adc	r29, r1
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	ed 01       	movw	r28, r26
    2734:	08 95       	ret

00002736 <sprintf>:
    2736:	ae e0       	ldi	r26, 0x0E	; 14
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e1 ea       	ldi	r30, 0xA1	; 161
    273c:	f3 e1       	ldi	r31, 0x13	; 19
    273e:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__prologue_saves__+0x1c>
    2742:	0d 89       	ldd	r16, Y+21	; 0x15
    2744:	1e 89       	ldd	r17, Y+22	; 0x16
    2746:	86 e0       	ldi	r24, 0x06	; 6
    2748:	8c 83       	std	Y+4, r24	; 0x04
    274a:	1a 83       	std	Y+2, r17	; 0x02
    274c:	09 83       	std	Y+1, r16	; 0x01
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	9f e7       	ldi	r25, 0x7F	; 127
    2752:	9e 83       	std	Y+6, r25	; 0x06
    2754:	8d 83       	std	Y+5, r24	; 0x05
    2756:	9e 01       	movw	r18, r28
    2758:	27 5e       	subi	r18, 0xE7	; 231
    275a:	3f 4f       	sbci	r19, 0xFF	; 255
    275c:	ce 01       	movw	r24, r28
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	6f 89       	ldd	r22, Y+23	; 0x17
    2762:	78 8d       	ldd	r23, Y+24	; 0x18
    2764:	a9 01       	movw	r20, r18
    2766:	0e 94 bf 13 	call	0x277e	; 0x277e <vfprintf>
    276a:	2f 81       	ldd	r18, Y+7	; 0x07
    276c:	38 85       	ldd	r19, Y+8	; 0x08
    276e:	02 0f       	add	r16, r18
    2770:	13 1f       	adc	r17, r19
    2772:	f8 01       	movw	r30, r16
    2774:	10 82       	st	Z, r1
    2776:	2e 96       	adiw	r28, 0x0e	; 14
    2778:	e4 e0       	ldi	r30, 0x04	; 4
    277a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__epilogue_restores__+0x1c>

0000277e <vfprintf>:
    277e:	ab e0       	ldi	r26, 0x0B	; 11
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e5 ec       	ldi	r30, 0xC5	; 197
    2784:	f3 e1       	ldi	r31, 0x13	; 19
    2786:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__>
    278a:	3c 01       	movw	r6, r24
    278c:	2b 01       	movw	r4, r22
    278e:	5a 01       	movw	r10, r20
    2790:	fc 01       	movw	r30, r24
    2792:	17 82       	std	Z+7, r1	; 0x07
    2794:	16 82       	std	Z+6, r1	; 0x06
    2796:	83 81       	ldd	r24, Z+3	; 0x03
    2798:	81 fd       	sbrc	r24, 1
    279a:	03 c0       	rjmp	.+6      	; 0x27a2 <vfprintf+0x24>
    279c:	6f ef       	ldi	r22, 0xFF	; 255
    279e:	7f ef       	ldi	r23, 0xFF	; 255
    27a0:	c6 c1       	rjmp	.+908    	; 0x2b2e <vfprintf+0x3b0>
    27a2:	9a e0       	ldi	r25, 0x0A	; 10
    27a4:	89 2e       	mov	r8, r25
    27a6:	1e 01       	movw	r2, r28
    27a8:	08 94       	sec
    27aa:	21 1c       	adc	r2, r1
    27ac:	31 1c       	adc	r3, r1
    27ae:	f3 01       	movw	r30, r6
    27b0:	23 81       	ldd	r18, Z+3	; 0x03
    27b2:	f2 01       	movw	r30, r4
    27b4:	23 fd       	sbrc	r18, 3
    27b6:	85 91       	lpm	r24, Z+
    27b8:	23 ff       	sbrs	r18, 3
    27ba:	81 91       	ld	r24, Z+
    27bc:	2f 01       	movw	r4, r30
    27be:	88 23       	and	r24, r24
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <vfprintf+0x46>
    27c2:	b2 c1       	rjmp	.+868    	; 0x2b28 <vfprintf+0x3aa>
    27c4:	85 32       	cpi	r24, 0x25	; 37
    27c6:	39 f4       	brne	.+14     	; 0x27d6 <vfprintf+0x58>
    27c8:	23 fd       	sbrc	r18, 3
    27ca:	85 91       	lpm	r24, Z+
    27cc:	23 ff       	sbrs	r18, 3
    27ce:	81 91       	ld	r24, Z+
    27d0:	2f 01       	movw	r4, r30
    27d2:	85 32       	cpi	r24, 0x25	; 37
    27d4:	29 f4       	brne	.+10     	; 0x27e0 <vfprintf+0x62>
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	b3 01       	movw	r22, r6
    27da:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <fputc>
    27de:	e7 cf       	rjmp	.-50     	; 0x27ae <vfprintf+0x30>
    27e0:	98 2f       	mov	r25, r24
    27e2:	ff 24       	eor	r15, r15
    27e4:	ee 24       	eor	r14, r14
    27e6:	99 24       	eor	r9, r9
    27e8:	ff e1       	ldi	r31, 0x1F	; 31
    27ea:	ff 15       	cp	r31, r15
    27ec:	d0 f0       	brcs	.+52     	; 0x2822 <vfprintf+0xa4>
    27ee:	9b 32       	cpi	r25, 0x2B	; 43
    27f0:	69 f0       	breq	.+26     	; 0x280c <vfprintf+0x8e>
    27f2:	9c 32       	cpi	r25, 0x2C	; 44
    27f4:	28 f4       	brcc	.+10     	; 0x2800 <vfprintf+0x82>
    27f6:	90 32       	cpi	r25, 0x20	; 32
    27f8:	59 f0       	breq	.+22     	; 0x2810 <vfprintf+0x92>
    27fa:	93 32       	cpi	r25, 0x23	; 35
    27fc:	91 f4       	brne	.+36     	; 0x2822 <vfprintf+0xa4>
    27fe:	0e c0       	rjmp	.+28     	; 0x281c <vfprintf+0x9e>
    2800:	9d 32       	cpi	r25, 0x2D	; 45
    2802:	49 f0       	breq	.+18     	; 0x2816 <vfprintf+0x98>
    2804:	90 33       	cpi	r25, 0x30	; 48
    2806:	69 f4       	brne	.+26     	; 0x2822 <vfprintf+0xa4>
    2808:	41 e0       	ldi	r20, 0x01	; 1
    280a:	24 c0       	rjmp	.+72     	; 0x2854 <vfprintf+0xd6>
    280c:	52 e0       	ldi	r21, 0x02	; 2
    280e:	f5 2a       	or	r15, r21
    2810:	84 e0       	ldi	r24, 0x04	; 4
    2812:	f8 2a       	or	r15, r24
    2814:	28 c0       	rjmp	.+80     	; 0x2866 <vfprintf+0xe8>
    2816:	98 e0       	ldi	r25, 0x08	; 8
    2818:	f9 2a       	or	r15, r25
    281a:	25 c0       	rjmp	.+74     	; 0x2866 <vfprintf+0xe8>
    281c:	e0 e1       	ldi	r30, 0x10	; 16
    281e:	fe 2a       	or	r15, r30
    2820:	22 c0       	rjmp	.+68     	; 0x2866 <vfprintf+0xe8>
    2822:	f7 fc       	sbrc	r15, 7
    2824:	29 c0       	rjmp	.+82     	; 0x2878 <vfprintf+0xfa>
    2826:	89 2f       	mov	r24, r25
    2828:	80 53       	subi	r24, 0x30	; 48
    282a:	8a 30       	cpi	r24, 0x0A	; 10
    282c:	70 f4       	brcc	.+28     	; 0x284a <vfprintf+0xcc>
    282e:	f6 fe       	sbrs	r15, 6
    2830:	05 c0       	rjmp	.+10     	; 0x283c <vfprintf+0xbe>
    2832:	98 9c       	mul	r9, r8
    2834:	90 2c       	mov	r9, r0
    2836:	11 24       	eor	r1, r1
    2838:	98 0e       	add	r9, r24
    283a:	15 c0       	rjmp	.+42     	; 0x2866 <vfprintf+0xe8>
    283c:	e8 9c       	mul	r14, r8
    283e:	e0 2c       	mov	r14, r0
    2840:	11 24       	eor	r1, r1
    2842:	e8 0e       	add	r14, r24
    2844:	f0 e2       	ldi	r31, 0x20	; 32
    2846:	ff 2a       	or	r15, r31
    2848:	0e c0       	rjmp	.+28     	; 0x2866 <vfprintf+0xe8>
    284a:	9e 32       	cpi	r25, 0x2E	; 46
    284c:	29 f4       	brne	.+10     	; 0x2858 <vfprintf+0xda>
    284e:	f6 fc       	sbrc	r15, 6
    2850:	6b c1       	rjmp	.+726    	; 0x2b28 <vfprintf+0x3aa>
    2852:	40 e4       	ldi	r20, 0x40	; 64
    2854:	f4 2a       	or	r15, r20
    2856:	07 c0       	rjmp	.+14     	; 0x2866 <vfprintf+0xe8>
    2858:	9c 36       	cpi	r25, 0x6C	; 108
    285a:	19 f4       	brne	.+6      	; 0x2862 <vfprintf+0xe4>
    285c:	50 e8       	ldi	r21, 0x80	; 128
    285e:	f5 2a       	or	r15, r21
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <vfprintf+0xe8>
    2862:	98 36       	cpi	r25, 0x68	; 104
    2864:	49 f4       	brne	.+18     	; 0x2878 <vfprintf+0xfa>
    2866:	f2 01       	movw	r30, r4
    2868:	23 fd       	sbrc	r18, 3
    286a:	95 91       	lpm	r25, Z+
    286c:	23 ff       	sbrs	r18, 3
    286e:	91 91       	ld	r25, Z+
    2870:	2f 01       	movw	r4, r30
    2872:	99 23       	and	r25, r25
    2874:	09 f0       	breq	.+2      	; 0x2878 <vfprintf+0xfa>
    2876:	b8 cf       	rjmp	.-144    	; 0x27e8 <vfprintf+0x6a>
    2878:	89 2f       	mov	r24, r25
    287a:	85 54       	subi	r24, 0x45	; 69
    287c:	83 30       	cpi	r24, 0x03	; 3
    287e:	18 f0       	brcs	.+6      	; 0x2886 <vfprintf+0x108>
    2880:	80 52       	subi	r24, 0x20	; 32
    2882:	83 30       	cpi	r24, 0x03	; 3
    2884:	38 f4       	brcc	.+14     	; 0x2894 <vfprintf+0x116>
    2886:	44 e0       	ldi	r20, 0x04	; 4
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	a4 0e       	add	r10, r20
    288c:	b5 1e       	adc	r11, r21
    288e:	5f e3       	ldi	r21, 0x3F	; 63
    2890:	59 83       	std	Y+1, r21	; 0x01
    2892:	0f c0       	rjmp	.+30     	; 0x28b2 <vfprintf+0x134>
    2894:	93 36       	cpi	r25, 0x63	; 99
    2896:	31 f0       	breq	.+12     	; 0x28a4 <vfprintf+0x126>
    2898:	93 37       	cpi	r25, 0x73	; 115
    289a:	79 f0       	breq	.+30     	; 0x28ba <vfprintf+0x13c>
    289c:	93 35       	cpi	r25, 0x53	; 83
    289e:	09 f0       	breq	.+2      	; 0x28a2 <vfprintf+0x124>
    28a0:	56 c0       	rjmp	.+172    	; 0x294e <vfprintf+0x1d0>
    28a2:	20 c0       	rjmp	.+64     	; 0x28e4 <vfprintf+0x166>
    28a4:	f5 01       	movw	r30, r10
    28a6:	80 81       	ld	r24, Z
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	42 e0       	ldi	r20, 0x02	; 2
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	a4 0e       	add	r10, r20
    28b0:	b5 1e       	adc	r11, r21
    28b2:	61 01       	movw	r12, r2
    28b4:	01 e0       	ldi	r16, 0x01	; 1
    28b6:	10 e0       	ldi	r17, 0x00	; 0
    28b8:	12 c0       	rjmp	.+36     	; 0x28de <vfprintf+0x160>
    28ba:	f5 01       	movw	r30, r10
    28bc:	c0 80       	ld	r12, Z
    28be:	d1 80       	ldd	r13, Z+1	; 0x01
    28c0:	f6 fc       	sbrc	r15, 6
    28c2:	03 c0       	rjmp	.+6      	; 0x28ca <vfprintf+0x14c>
    28c4:	6f ef       	ldi	r22, 0xFF	; 255
    28c6:	7f ef       	ldi	r23, 0xFF	; 255
    28c8:	02 c0       	rjmp	.+4      	; 0x28ce <vfprintf+0x150>
    28ca:	69 2d       	mov	r22, r9
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	42 e0       	ldi	r20, 0x02	; 2
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	a4 0e       	add	r10, r20
    28d4:	b5 1e       	adc	r11, r21
    28d6:	c6 01       	movw	r24, r12
    28d8:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <strnlen>
    28dc:	8c 01       	movw	r16, r24
    28de:	5f e7       	ldi	r21, 0x7F	; 127
    28e0:	f5 22       	and	r15, r21
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <vfprintf+0x18e>
    28e4:	f5 01       	movw	r30, r10
    28e6:	c0 80       	ld	r12, Z
    28e8:	d1 80       	ldd	r13, Z+1	; 0x01
    28ea:	f6 fc       	sbrc	r15, 6
    28ec:	03 c0       	rjmp	.+6      	; 0x28f4 <vfprintf+0x176>
    28ee:	6f ef       	ldi	r22, 0xFF	; 255
    28f0:	7f ef       	ldi	r23, 0xFF	; 255
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <vfprintf+0x17a>
    28f4:	69 2d       	mov	r22, r9
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	42 e0       	ldi	r20, 0x02	; 2
    28fa:	50 e0       	ldi	r21, 0x00	; 0
    28fc:	a4 0e       	add	r10, r20
    28fe:	b5 1e       	adc	r11, r21
    2900:	c6 01       	movw	r24, r12
    2902:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <strnlen_P>
    2906:	8c 01       	movw	r16, r24
    2908:	50 e8       	ldi	r21, 0x80	; 128
    290a:	f5 2a       	or	r15, r21
    290c:	f3 fe       	sbrs	r15, 3
    290e:	07 c0       	rjmp	.+14     	; 0x291e <vfprintf+0x1a0>
    2910:	1a c0       	rjmp	.+52     	; 0x2946 <vfprintf+0x1c8>
    2912:	80 e2       	ldi	r24, 0x20	; 32
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	b3 01       	movw	r22, r6
    2918:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <fputc>
    291c:	ea 94       	dec	r14
    291e:	8e 2d       	mov	r24, r14
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	08 17       	cp	r16, r24
    2924:	19 07       	cpc	r17, r25
    2926:	a8 f3       	brcs	.-22     	; 0x2912 <vfprintf+0x194>
    2928:	0e c0       	rjmp	.+28     	; 0x2946 <vfprintf+0x1c8>
    292a:	f6 01       	movw	r30, r12
    292c:	f7 fc       	sbrc	r15, 7
    292e:	85 91       	lpm	r24, Z+
    2930:	f7 fe       	sbrs	r15, 7
    2932:	81 91       	ld	r24, Z+
    2934:	6f 01       	movw	r12, r30
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	b3 01       	movw	r22, r6
    293a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <fputc>
    293e:	e1 10       	cpse	r14, r1
    2940:	ea 94       	dec	r14
    2942:	01 50       	subi	r16, 0x01	; 1
    2944:	10 40       	sbci	r17, 0x00	; 0
    2946:	01 15       	cp	r16, r1
    2948:	11 05       	cpc	r17, r1
    294a:	79 f7       	brne	.-34     	; 0x292a <vfprintf+0x1ac>
    294c:	ea c0       	rjmp	.+468    	; 0x2b22 <vfprintf+0x3a4>
    294e:	94 36       	cpi	r25, 0x64	; 100
    2950:	11 f0       	breq	.+4      	; 0x2956 <vfprintf+0x1d8>
    2952:	99 36       	cpi	r25, 0x69	; 105
    2954:	69 f5       	brne	.+90     	; 0x29b0 <vfprintf+0x232>
    2956:	f7 fe       	sbrs	r15, 7
    2958:	08 c0       	rjmp	.+16     	; 0x296a <vfprintf+0x1ec>
    295a:	f5 01       	movw	r30, r10
    295c:	20 81       	ld	r18, Z
    295e:	31 81       	ldd	r19, Z+1	; 0x01
    2960:	42 81       	ldd	r20, Z+2	; 0x02
    2962:	53 81       	ldd	r21, Z+3	; 0x03
    2964:	84 e0       	ldi	r24, 0x04	; 4
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0a c0       	rjmp	.+20     	; 0x297e <vfprintf+0x200>
    296a:	f5 01       	movw	r30, r10
    296c:	80 81       	ld	r24, Z
    296e:	91 81       	ldd	r25, Z+1	; 0x01
    2970:	9c 01       	movw	r18, r24
    2972:	44 27       	eor	r20, r20
    2974:	37 fd       	sbrc	r19, 7
    2976:	40 95       	com	r20
    2978:	54 2f       	mov	r21, r20
    297a:	82 e0       	ldi	r24, 0x02	; 2
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a8 0e       	add	r10, r24
    2980:	b9 1e       	adc	r11, r25
    2982:	9f e6       	ldi	r25, 0x6F	; 111
    2984:	f9 22       	and	r15, r25
    2986:	57 ff       	sbrs	r21, 7
    2988:	09 c0       	rjmp	.+18     	; 0x299c <vfprintf+0x21e>
    298a:	50 95       	com	r21
    298c:	40 95       	com	r20
    298e:	30 95       	com	r19
    2990:	21 95       	neg	r18
    2992:	3f 4f       	sbci	r19, 0xFF	; 255
    2994:	4f 4f       	sbci	r20, 0xFF	; 255
    2996:	5f 4f       	sbci	r21, 0xFF	; 255
    2998:	e0 e8       	ldi	r30, 0x80	; 128
    299a:	fe 2a       	or	r15, r30
    299c:	ca 01       	movw	r24, r20
    299e:	b9 01       	movw	r22, r18
    29a0:	a1 01       	movw	r20, r2
    29a2:	2a e0       	ldi	r18, 0x0A	; 10
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__ultoa_invert>
    29aa:	d8 2e       	mov	r13, r24
    29ac:	d2 18       	sub	r13, r2
    29ae:	40 c0       	rjmp	.+128    	; 0x2a30 <vfprintf+0x2b2>
    29b0:	95 37       	cpi	r25, 0x75	; 117
    29b2:	29 f4       	brne	.+10     	; 0x29be <vfprintf+0x240>
    29b4:	1f 2d       	mov	r17, r15
    29b6:	1f 7e       	andi	r17, 0xEF	; 239
    29b8:	2a e0       	ldi	r18, 0x0A	; 10
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	1d c0       	rjmp	.+58     	; 0x29f8 <vfprintf+0x27a>
    29be:	1f 2d       	mov	r17, r15
    29c0:	19 7f       	andi	r17, 0xF9	; 249
    29c2:	9f 36       	cpi	r25, 0x6F	; 111
    29c4:	61 f0       	breq	.+24     	; 0x29de <vfprintf+0x260>
    29c6:	90 37       	cpi	r25, 0x70	; 112
    29c8:	20 f4       	brcc	.+8      	; 0x29d2 <vfprintf+0x254>
    29ca:	98 35       	cpi	r25, 0x58	; 88
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <vfprintf+0x252>
    29ce:	ac c0       	rjmp	.+344    	; 0x2b28 <vfprintf+0x3aa>
    29d0:	0f c0       	rjmp	.+30     	; 0x29f0 <vfprintf+0x272>
    29d2:	90 37       	cpi	r25, 0x70	; 112
    29d4:	39 f0       	breq	.+14     	; 0x29e4 <vfprintf+0x266>
    29d6:	98 37       	cpi	r25, 0x78	; 120
    29d8:	09 f0       	breq	.+2      	; 0x29dc <vfprintf+0x25e>
    29da:	a6 c0       	rjmp	.+332    	; 0x2b28 <vfprintf+0x3aa>
    29dc:	04 c0       	rjmp	.+8      	; 0x29e6 <vfprintf+0x268>
    29de:	28 e0       	ldi	r18, 0x08	; 8
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	0a c0       	rjmp	.+20     	; 0x29f8 <vfprintf+0x27a>
    29e4:	10 61       	ori	r17, 0x10	; 16
    29e6:	14 fd       	sbrc	r17, 4
    29e8:	14 60       	ori	r17, 0x04	; 4
    29ea:	20 e1       	ldi	r18, 0x10	; 16
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	04 c0       	rjmp	.+8      	; 0x29f8 <vfprintf+0x27a>
    29f0:	14 fd       	sbrc	r17, 4
    29f2:	16 60       	ori	r17, 0x06	; 6
    29f4:	20 e1       	ldi	r18, 0x10	; 16
    29f6:	32 e0       	ldi	r19, 0x02	; 2
    29f8:	17 ff       	sbrs	r17, 7
    29fa:	08 c0       	rjmp	.+16     	; 0x2a0c <vfprintf+0x28e>
    29fc:	f5 01       	movw	r30, r10
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	44 e0       	ldi	r20, 0x04	; 4
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	08 c0       	rjmp	.+16     	; 0x2a1c <vfprintf+0x29e>
    2a0c:	f5 01       	movw	r30, r10
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	bc 01       	movw	r22, r24
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	42 e0       	ldi	r20, 0x02	; 2
    2a1a:	50 e0       	ldi	r21, 0x00	; 0
    2a1c:	a4 0e       	add	r10, r20
    2a1e:	b5 1e       	adc	r11, r21
    2a20:	a1 01       	movw	r20, r2
    2a22:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__ultoa_invert>
    2a26:	d8 2e       	mov	r13, r24
    2a28:	d2 18       	sub	r13, r2
    2a2a:	8f e7       	ldi	r24, 0x7F	; 127
    2a2c:	f8 2e       	mov	r15, r24
    2a2e:	f1 22       	and	r15, r17
    2a30:	f6 fe       	sbrs	r15, 6
    2a32:	0b c0       	rjmp	.+22     	; 0x2a4a <vfprintf+0x2cc>
    2a34:	5e ef       	ldi	r21, 0xFE	; 254
    2a36:	f5 22       	and	r15, r21
    2a38:	d9 14       	cp	r13, r9
    2a3a:	38 f4       	brcc	.+14     	; 0x2a4a <vfprintf+0x2cc>
    2a3c:	f4 fe       	sbrs	r15, 4
    2a3e:	07 c0       	rjmp	.+14     	; 0x2a4e <vfprintf+0x2d0>
    2a40:	f2 fc       	sbrc	r15, 2
    2a42:	05 c0       	rjmp	.+10     	; 0x2a4e <vfprintf+0x2d0>
    2a44:	8f ee       	ldi	r24, 0xEF	; 239
    2a46:	f8 22       	and	r15, r24
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <vfprintf+0x2d0>
    2a4a:	1d 2d       	mov	r17, r13
    2a4c:	01 c0       	rjmp	.+2      	; 0x2a50 <vfprintf+0x2d2>
    2a4e:	19 2d       	mov	r17, r9
    2a50:	f4 fe       	sbrs	r15, 4
    2a52:	0d c0       	rjmp	.+26     	; 0x2a6e <vfprintf+0x2f0>
    2a54:	fe 01       	movw	r30, r28
    2a56:	ed 0d       	add	r30, r13
    2a58:	f1 1d       	adc	r31, r1
    2a5a:	80 81       	ld	r24, Z
    2a5c:	80 33       	cpi	r24, 0x30	; 48
    2a5e:	19 f4       	brne	.+6      	; 0x2a66 <vfprintf+0x2e8>
    2a60:	99 ee       	ldi	r25, 0xE9	; 233
    2a62:	f9 22       	and	r15, r25
    2a64:	08 c0       	rjmp	.+16     	; 0x2a76 <vfprintf+0x2f8>
    2a66:	1f 5f       	subi	r17, 0xFF	; 255
    2a68:	f2 fe       	sbrs	r15, 2
    2a6a:	05 c0       	rjmp	.+10     	; 0x2a76 <vfprintf+0x2f8>
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <vfprintf+0x2f6>
    2a6e:	8f 2d       	mov	r24, r15
    2a70:	86 78       	andi	r24, 0x86	; 134
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <vfprintf+0x2f8>
    2a74:	1f 5f       	subi	r17, 0xFF	; 255
    2a76:	0f 2d       	mov	r16, r15
    2a78:	f3 fc       	sbrc	r15, 3
    2a7a:	14 c0       	rjmp	.+40     	; 0x2aa4 <vfprintf+0x326>
    2a7c:	f0 fe       	sbrs	r15, 0
    2a7e:	0f c0       	rjmp	.+30     	; 0x2a9e <vfprintf+0x320>
    2a80:	1e 15       	cp	r17, r14
    2a82:	10 f0       	brcs	.+4      	; 0x2a88 <vfprintf+0x30a>
    2a84:	9d 2c       	mov	r9, r13
    2a86:	0b c0       	rjmp	.+22     	; 0x2a9e <vfprintf+0x320>
    2a88:	9d 2c       	mov	r9, r13
    2a8a:	9e 0c       	add	r9, r14
    2a8c:	91 1a       	sub	r9, r17
    2a8e:	1e 2d       	mov	r17, r14
    2a90:	06 c0       	rjmp	.+12     	; 0x2a9e <vfprintf+0x320>
    2a92:	80 e2       	ldi	r24, 0x20	; 32
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	b3 01       	movw	r22, r6
    2a98:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <fputc>
    2a9c:	1f 5f       	subi	r17, 0xFF	; 255
    2a9e:	1e 15       	cp	r17, r14
    2aa0:	c0 f3       	brcs	.-16     	; 0x2a92 <vfprintf+0x314>
    2aa2:	04 c0       	rjmp	.+8      	; 0x2aac <vfprintf+0x32e>
    2aa4:	1e 15       	cp	r17, r14
    2aa6:	10 f4       	brcc	.+4      	; 0x2aac <vfprintf+0x32e>
    2aa8:	e1 1a       	sub	r14, r17
    2aaa:	01 c0       	rjmp	.+2      	; 0x2aae <vfprintf+0x330>
    2aac:	ee 24       	eor	r14, r14
    2aae:	04 ff       	sbrs	r16, 4
    2ab0:	0f c0       	rjmp	.+30     	; 0x2ad0 <vfprintf+0x352>
    2ab2:	80 e3       	ldi	r24, 0x30	; 48
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	b3 01       	movw	r22, r6
    2ab8:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <fputc>
    2abc:	02 ff       	sbrs	r16, 2
    2abe:	1d c0       	rjmp	.+58     	; 0x2afa <vfprintf+0x37c>
    2ac0:	01 fd       	sbrc	r16, 1
    2ac2:	03 c0       	rjmp	.+6      	; 0x2aca <vfprintf+0x34c>
    2ac4:	88 e7       	ldi	r24, 0x78	; 120
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	0e c0       	rjmp	.+28     	; 0x2ae6 <vfprintf+0x368>
    2aca:	88 e5       	ldi	r24, 0x58	; 88
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	0b c0       	rjmp	.+22     	; 0x2ae6 <vfprintf+0x368>
    2ad0:	80 2f       	mov	r24, r16
    2ad2:	86 78       	andi	r24, 0x86	; 134
    2ad4:	91 f0       	breq	.+36     	; 0x2afa <vfprintf+0x37c>
    2ad6:	01 ff       	sbrs	r16, 1
    2ad8:	02 c0       	rjmp	.+4      	; 0x2ade <vfprintf+0x360>
    2ada:	8b e2       	ldi	r24, 0x2B	; 43
    2adc:	01 c0       	rjmp	.+2      	; 0x2ae0 <vfprintf+0x362>
    2ade:	80 e2       	ldi	r24, 0x20	; 32
    2ae0:	f7 fc       	sbrc	r15, 7
    2ae2:	8d e2       	ldi	r24, 0x2D	; 45
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	b3 01       	movw	r22, r6
    2ae8:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <fputc>
    2aec:	06 c0       	rjmp	.+12     	; 0x2afa <vfprintf+0x37c>
    2aee:	80 e3       	ldi	r24, 0x30	; 48
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	b3 01       	movw	r22, r6
    2af4:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <fputc>
    2af8:	9a 94       	dec	r9
    2afa:	d9 14       	cp	r13, r9
    2afc:	c0 f3       	brcs	.-16     	; 0x2aee <vfprintf+0x370>
    2afe:	da 94       	dec	r13
    2b00:	f1 01       	movw	r30, r2
    2b02:	ed 0d       	add	r30, r13
    2b04:	f1 1d       	adc	r31, r1
    2b06:	80 81       	ld	r24, Z
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	b3 01       	movw	r22, r6
    2b0c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <fputc>
    2b10:	dd 20       	and	r13, r13
    2b12:	a9 f7       	brne	.-22     	; 0x2afe <vfprintf+0x380>
    2b14:	06 c0       	rjmp	.+12     	; 0x2b22 <vfprintf+0x3a4>
    2b16:	80 e2       	ldi	r24, 0x20	; 32
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	b3 01       	movw	r22, r6
    2b1c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <fputc>
    2b20:	ea 94       	dec	r14
    2b22:	ee 20       	and	r14, r14
    2b24:	c1 f7       	brne	.-16     	; 0x2b16 <vfprintf+0x398>
    2b26:	43 ce       	rjmp	.-890    	; 0x27ae <vfprintf+0x30>
    2b28:	f3 01       	movw	r30, r6
    2b2a:	66 81       	ldd	r22, Z+6	; 0x06
    2b2c:	77 81       	ldd	r23, Z+7	; 0x07
    2b2e:	cb 01       	movw	r24, r22
    2b30:	2b 96       	adiw	r28, 0x0b	; 11
    2b32:	e2 e1       	ldi	r30, 0x12	; 18
    2b34:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__>

00002b38 <strnlen_P>:
    2b38:	fc 01       	movw	r30, r24
    2b3a:	05 90       	lpm	r0, Z+
    2b3c:	61 50       	subi	r22, 0x01	; 1
    2b3e:	70 40       	sbci	r23, 0x00	; 0
    2b40:	01 10       	cpse	r0, r1
    2b42:	d8 f7       	brcc	.-10     	; 0x2b3a <strnlen_P+0x2>
    2b44:	80 95       	com	r24
    2b46:	90 95       	com	r25
    2b48:	8e 0f       	add	r24, r30
    2b4a:	9f 1f       	adc	r25, r31
    2b4c:	08 95       	ret

00002b4e <strnlen>:
    2b4e:	fc 01       	movw	r30, r24
    2b50:	61 50       	subi	r22, 0x01	; 1
    2b52:	70 40       	sbci	r23, 0x00	; 0
    2b54:	01 90       	ld	r0, Z+
    2b56:	01 10       	cpse	r0, r1
    2b58:	d8 f7       	brcc	.-10     	; 0x2b50 <strnlen+0x2>
    2b5a:	80 95       	com	r24
    2b5c:	90 95       	com	r25
    2b5e:	8e 0f       	add	r24, r30
    2b60:	9f 1f       	adc	r25, r31
    2b62:	08 95       	ret

00002b64 <fputc>:
    2b64:	0f 93       	push	r16
    2b66:	1f 93       	push	r17
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	8c 01       	movw	r16, r24
    2b6e:	eb 01       	movw	r28, r22
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	81 ff       	sbrs	r24, 1
    2b74:	1b c0       	rjmp	.+54     	; 0x2bac <fputc+0x48>
    2b76:	82 ff       	sbrs	r24, 2
    2b78:	0d c0       	rjmp	.+26     	; 0x2b94 <fputc+0x30>
    2b7a:	2e 81       	ldd	r18, Y+6	; 0x06
    2b7c:	3f 81       	ldd	r19, Y+7	; 0x07
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b80:	9d 81       	ldd	r25, Y+5	; 0x05
    2b82:	28 17       	cp	r18, r24
    2b84:	39 07       	cpc	r19, r25
    2b86:	64 f4       	brge	.+24     	; 0x2ba0 <fputc+0x3c>
    2b88:	e8 81       	ld	r30, Y
    2b8a:	f9 81       	ldd	r31, Y+1	; 0x01
    2b8c:	01 93       	st	Z+, r16
    2b8e:	f9 83       	std	Y+1, r31	; 0x01
    2b90:	e8 83       	st	Y, r30
    2b92:	06 c0       	rjmp	.+12     	; 0x2ba0 <fputc+0x3c>
    2b94:	e8 85       	ldd	r30, Y+8	; 0x08
    2b96:	f9 85       	ldd	r31, Y+9	; 0x09
    2b98:	80 2f       	mov	r24, r16
    2b9a:	09 95       	icall
    2b9c:	89 2b       	or	r24, r25
    2b9e:	31 f4       	brne	.+12     	; 0x2bac <fputc+0x48>
    2ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba4:	01 96       	adiw	r24, 0x01	; 1
    2ba6:	9f 83       	std	Y+7, r25	; 0x07
    2ba8:	8e 83       	std	Y+6, r24	; 0x06
    2baa:	02 c0       	rjmp	.+4      	; 0x2bb0 <fputc+0x4c>
    2bac:	0f ef       	ldi	r16, 0xFF	; 255
    2bae:	1f ef       	ldi	r17, 0xFF	; 255
    2bb0:	c8 01       	movw	r24, r16
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	08 95       	ret

00002bbc <__ultoa_invert>:
    2bbc:	fa 01       	movw	r30, r20
    2bbe:	aa 27       	eor	r26, r26
    2bc0:	28 30       	cpi	r18, 0x08	; 8
    2bc2:	51 f1       	breq	.+84     	; 0x2c18 <__ultoa_invert+0x5c>
    2bc4:	20 31       	cpi	r18, 0x10	; 16
    2bc6:	81 f1       	breq	.+96     	; 0x2c28 <__ultoa_invert+0x6c>
    2bc8:	e8 94       	clt
    2bca:	6f 93       	push	r22
    2bcc:	6e 7f       	andi	r22, 0xFE	; 254
    2bce:	6e 5f       	subi	r22, 0xFE	; 254
    2bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd6:	af 4f       	sbci	r26, 0xFF	; 255
    2bd8:	b1 e0       	ldi	r27, 0x01	; 1
    2bda:	3e d0       	rcall	.+124    	; 0x2c58 <__ultoa_invert+0x9c>
    2bdc:	b4 e0       	ldi	r27, 0x04	; 4
    2bde:	3c d0       	rcall	.+120    	; 0x2c58 <__ultoa_invert+0x9c>
    2be0:	67 0f       	add	r22, r23
    2be2:	78 1f       	adc	r23, r24
    2be4:	89 1f       	adc	r24, r25
    2be6:	9a 1f       	adc	r25, r26
    2be8:	a1 1d       	adc	r26, r1
    2bea:	68 0f       	add	r22, r24
    2bec:	79 1f       	adc	r23, r25
    2bee:	8a 1f       	adc	r24, r26
    2bf0:	91 1d       	adc	r25, r1
    2bf2:	a1 1d       	adc	r26, r1
    2bf4:	6a 0f       	add	r22, r26
    2bf6:	71 1d       	adc	r23, r1
    2bf8:	81 1d       	adc	r24, r1
    2bfa:	91 1d       	adc	r25, r1
    2bfc:	a1 1d       	adc	r26, r1
    2bfe:	20 d0       	rcall	.+64     	; 0x2c40 <__ultoa_invert+0x84>
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <__ultoa_invert+0x48>
    2c02:	68 94       	set
    2c04:	3f 91       	pop	r19
    2c06:	2a e0       	ldi	r18, 0x0A	; 10
    2c08:	26 9f       	mul	r18, r22
    2c0a:	11 24       	eor	r1, r1
    2c0c:	30 19       	sub	r19, r0
    2c0e:	30 5d       	subi	r19, 0xD0	; 208
    2c10:	31 93       	st	Z+, r19
    2c12:	de f6       	brtc	.-74     	; 0x2bca <__ultoa_invert+0xe>
    2c14:	cf 01       	movw	r24, r30
    2c16:	08 95       	ret
    2c18:	46 2f       	mov	r20, r22
    2c1a:	47 70       	andi	r20, 0x07	; 7
    2c1c:	40 5d       	subi	r20, 0xD0	; 208
    2c1e:	41 93       	st	Z+, r20
    2c20:	b3 e0       	ldi	r27, 0x03	; 3
    2c22:	0f d0       	rcall	.+30     	; 0x2c42 <__ultoa_invert+0x86>
    2c24:	c9 f7       	brne	.-14     	; 0x2c18 <__ultoa_invert+0x5c>
    2c26:	f6 cf       	rjmp	.-20     	; 0x2c14 <__ultoa_invert+0x58>
    2c28:	46 2f       	mov	r20, r22
    2c2a:	4f 70       	andi	r20, 0x0F	; 15
    2c2c:	40 5d       	subi	r20, 0xD0	; 208
    2c2e:	4a 33       	cpi	r20, 0x3A	; 58
    2c30:	18 f0       	brcs	.+6      	; 0x2c38 <__ultoa_invert+0x7c>
    2c32:	49 5d       	subi	r20, 0xD9	; 217
    2c34:	31 fd       	sbrc	r19, 1
    2c36:	40 52       	subi	r20, 0x20	; 32
    2c38:	41 93       	st	Z+, r20
    2c3a:	02 d0       	rcall	.+4      	; 0x2c40 <__ultoa_invert+0x84>
    2c3c:	a9 f7       	brne	.-22     	; 0x2c28 <__ultoa_invert+0x6c>
    2c3e:	ea cf       	rjmp	.-44     	; 0x2c14 <__ultoa_invert+0x58>
    2c40:	b4 e0       	ldi	r27, 0x04	; 4
    2c42:	a6 95       	lsr	r26
    2c44:	97 95       	ror	r25
    2c46:	87 95       	ror	r24
    2c48:	77 95       	ror	r23
    2c4a:	67 95       	ror	r22
    2c4c:	ba 95       	dec	r27
    2c4e:	c9 f7       	brne	.-14     	; 0x2c42 <__ultoa_invert+0x86>
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	61 05       	cpc	r22, r1
    2c54:	71 05       	cpc	r23, r1
    2c56:	08 95       	ret
    2c58:	9b 01       	movw	r18, r22
    2c5a:	ac 01       	movw	r20, r24
    2c5c:	0a 2e       	mov	r0, r26
    2c5e:	06 94       	lsr	r0
    2c60:	57 95       	ror	r21
    2c62:	47 95       	ror	r20
    2c64:	37 95       	ror	r19
    2c66:	27 95       	ror	r18
    2c68:	ba 95       	dec	r27
    2c6a:	c9 f7       	brne	.-14     	; 0x2c5e <__ultoa_invert+0xa2>
    2c6c:	62 0f       	add	r22, r18
    2c6e:	73 1f       	adc	r23, r19
    2c70:	84 1f       	adc	r24, r20
    2c72:	95 1f       	adc	r25, r21
    2c74:	a0 1d       	adc	r26, r0
    2c76:	08 95       	ret

00002c78 <_exit>:
    2c78:	f8 94       	cli

00002c7a <__stop_program>:
    2c7a:	ff cf       	rjmp	.-2      	; 0x2c7a <__stop_program>
